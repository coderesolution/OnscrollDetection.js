{"version":3,"file":"OnscrollDetection.js","sources":["../src/index.js"],"sourcesContent":["export default class OnscrollDetection {\n\tconstructor(options = {}) {\n\t\t// Initialise class properties with default values or provided options\n\t\tthis.elements = options.elements || '[data-onscroll]'\n\t\tthis.screen = options.screen || '(min-width: 1025px)'\n\t\tthis.triggers = new Map()\n\n\t\t// Set class names to defaults or provided options\n\t\tthis.classDefaults = {\n\t\t\tscrollingClass: 'is-scrolling',\n\t\t\tscrolledClass: 'has-scrolled',\n\t\t\tstickyClass: 'is-sticky',\n\t\t\tstuckClass: 'has-stuck',\n\t\t\t...options.classDefaults,\n\t\t}\n\n\t\t// Initialise the class\n\t\tthis.init()\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\t// Convert elements to an array and loop through each\n\t\tgsap.utils.toArray(this.elements).forEach((element, index) => {\n\t\t\t// Get the trigger element\n\t\t\tconst trigger = this.getTrigger(element)\n\n\t\t\t// Get the screen media query\n\t\t\tconst screen = this.getScreen(element)\n\n\t\t\t// Create a matchMedia instance\n\t\t\tconst matchMedia = gsap.matchMedia()\n\n\t\t\t// Get the animation properties for 'from' state\n\t\t\tconst fromProperties = this.getFromProperties(element, index)\n\n\t\t\t// Get the animation properties for 'to' state\n\t\t\tconst toProperties = this.getToProperties(element, index, trigger)\n\n\t\t\t// Add the animation to the matchMedia instance and store the ScrollTrigger instance\n\t\t\tconst animation = matchMedia.add(screen, () => {\n\t\t\t\tconst gsapAnimation = gsap.fromTo(element, fromProperties, toProperties)\n\n\t\t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t\t\t\t\telement,\n\t\t\t\t\tfromProperties,\n\t\t\t\t\ttoProperties,\n\t\t\t\t\tgsapAnimation,\n\t\t\t\t})\n\t\t\t})\n\n\t\t\t// Enable debug mode for logging\n\t\t\tthis.debugMode(element, index)\n\t\t})\n\t}\n\n\t// Helper methods\n\n\t// Get the trigger element for ScrollTrigger\n\tgetTrigger(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-auto']) && !element.hasAttribute('data-onscroll-trigger')) {\n\t\t\t// If data-onscroll-auto is present and data-onscroll-trigger is not, use the parent element as the trigger\n\t\t\treturn element.parentElement\n\t\t} else if (element.hasAttribute('data-onscroll-trigger')) {\n\t\t\t// If data-onscroll-trigger is present, try to find the DOM element specified by the attribute\n\t\t\tlet triggerElement = document.querySelector(element.dataset.onscrollTrigger)\n\t\t\tif (triggerElement) {\n\t\t\t\treturn triggerElement\n\t\t\t} else {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`Element specified by data-onscroll-trigger not found: ${element.dataset.onscrollTrigger}`\n\t\t\t\t)\n\t\t\t\treturn element\n\t\t\t}\n\t\t} else {\n\t\t\t// Otherwise, use the element itself as the trigger\n\t\t\treturn element\n\t\t}\n\t}\n\n\t// Get the screen media query\n\tgetScreen(element) {\n\t\treturn element.hasAttribute('data-onscroll-screen') ? element.dataset.onscrollScreen : this.screen\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetFromProperties(element, index) {\n\t\tconst animateFrom = this.getAnimateFrom(element)\n\t\tconst { offset } = this.getOffsetAndDistance(element)\n\n\t\treturn {\n\t\t\t...animateFrom,\n\t\t\tbottom: this.hasAttributes(element, ['data-onscroll-auto', 'data-onscroll-reverse']) ? 'auto' : null,\n\t\t\ttop:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-auto']) &&\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-reverse'])\n\t\t\t\t\t? 'auto'\n\t\t\t\t\t: null,\n\t\t\tx:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t\ty:\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t}\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetToProperties(element, index, trigger) {\n\t\tconst animateTo = this.getAnimateTo(element)\n\t\tconst stickyProperties = this.getStickyProperties(element)\n\t\tconst isSticky = this.hasAttributes(element, ['data-onscroll-sticky'])\n\n\t\treturn {\n\t\t\t...animateTo,\n\t\t\tx: this.getX(element),\n\t\t\ty: this.getY(element),\n\t\t\tease: 'none',\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: isSticky ? element : trigger,\n\t\t\t\tstart: this.getStart(element),\n\t\t\t\tend: this.getEnd(element),\n\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\tpin: stickyProperties.pin,\n\t\t\t\tpinSpacing: stickyProperties.pinSpacing,\n\t\t\t\tscrub: this.getScrub(element),\n\t\t\t\tmarkers: this.hasAttributes(element, ['data-onscroll-debug']),\n\t\t\t\tonEnter: () => {\n\t\t\t\t\telement.classList.add(this.classDefaults.scrollingClass, this.classDefaults.scrolledClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.add(this.classDefaults.stickyClass, this.classDefaults.stuckClass)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonLeave: () => {\n\t\t\t\t\telement.classList.remove(this.classDefaults.scrollingClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.remove(this.classDefaults.stickyClass)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonEnterBack: () => {\n\t\t\t\t\telement.classList.add(this.classDefaults.scrollingClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.add(this.classDefaults.stickyClass)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\telement.classList.remove(this.classDefaults.scrollingClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.remove(this.classDefaults.stickyClass)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t}\n\n\t// Get the sticky properties for ScrollTrigger animation\n\tgetStickyProperties(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn { pin: true, pinSpacing: false }\n\t\t} else {\n\t\t\treturn { pin: false, pinSpacing: true }\n\t\t}\n\t}\n\n\t// Check if an element has all the specified attributes\n\thasAttributes(element, attrs) {\n\t\treturn attrs.every((attr) => element.hasAttribute(attr))\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetAnimateFrom(element) {\n\t\treturn element.hasAttribute('data-onscroll-from') ? JSON.parse(element.dataset.onscrollFrom) : []\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetAnimateTo(element) {\n\t\treturn element.hasAttribute('data-onscroll-to') ? JSON.parse(element.dataset.onscrollTo) : []\n\t}\n\n\t// Get the offset value\n\tgetOffset(element) {\n\t\treturn element.hasAttribute('data-onscroll-offset') ? parseInt(element.dataset.onscrollOffset) : null\n\t}\n\n\t// Get the scroll direction\n\tgetDirection(element) {\n\t\treturn element.dataset.onscrollDirection\n\t}\n\n\t// Get the 'x' value for ScrollTrigger animation\n\tgetX(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn null\n\t\t}\n\t\tif (\n\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the 'y' value for ScrollTrigger animation\n\tgetY(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn null\n\t\t}\n\t\tif (\n\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the offset and distance values\n\tgetOffsetAndDistance(element) {\n\t\t// Check if the element has the data-onscroll-sticky attribute\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn { offset: null, distance: null }\n\t\t}\n\n\t\tlet offset = null\n\t\tlet distance = null\n\t\tconst triggerElement = this.getTrigger(element)\n\t\tconst triggerHeight = triggerElement.offsetHeight\n\n\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\n\t\t\t// If the offset value ends with a '%', calculate it as a percentage of the trigger height\n\t\t\tif (offsetValue.trim().endsWith('%')) {\n\t\t\t\tconst offsetPercentage = parseFloat(offsetValue) / 100\n\t\t\t\toffset = offsetPercentage * triggerHeight\n\t\t\t} else {\n\t\t\t\toffset = parseFloat(offsetValue)\n\t\t\t}\n\n\t\t\t// If the distance value ends with a '%', calculate it as a percentage of the trigger height\n\t\t\tif (distanceValue.trim().endsWith('%')) {\n\t\t\t\tconst distancePercentage = parseFloat(distanceValue) / 100\n\t\t\t\tdistance = distancePercentage * triggerHeight\n\t\t\t} else {\n\t\t\t\tdistance = parseFloat(distanceValue)\n\t\t\t}\n\t\t}\n\n\t\treturn { offset, distance }\n\t}\n\n\t// Get the distance or speed value for ScrollTrigger animation\n\tgetDistanceOrSpeed(element) {\n\t\tconst { distance } = this.getOffsetAndDistance(element)\n\t\tconst viewportHeight = window.innerHeight\n\t\tlet scrollSpeed = element.dataset.onscrollSpeed\n\t\tlet additionalDistance = 0\n\n\t\t// Check if there are two values\n\t\tif (scrollSpeed && scrollSpeed.includes(',')) {\n\t\t\tconst [speed, percentage] = scrollSpeed.split(',').map(parseFloat)\n\n\t\t\t// Update the scrollSpeed and calculate the additional distance\n\t\t\tscrollSpeed = speed\n\t\t\tadditionalDistance = (percentage / 100) * viewportHeight\n\n\t\t\t// If scrollSpeed is negative, subtract the additional distance\n\t\t\tif (scrollSpeed < 0) {\n\t\t\t\tadditionalDistance *= -1\n\t\t\t}\n\t\t} else {\n\t\t\tscrollSpeed = parseFloat(scrollSpeed || '0')\n\t\t}\n\n\t\tif (this.hasAttributes(element, ['data-onscroll-auto'])) {\n\t\t\tconst triggerElement = this.getTrigger(element)\n\t\t\tconst autoDistance = Math.abs(triggerElement.offsetHeight - element.offsetHeight)\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -autoDistance : autoDistance\n\t\t} else if (this.hasAttributes(element, ['data-onscroll-speed'])) {\n\t\t\tconst elementHeight = element.offsetHeight\n\t\t\tconst scrollDistance = scrollSpeed * elementHeight + additionalDistance\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -scrollDistance : scrollDistance\n\t\t} else if (distance !== null) {\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -distance : distance\n\t\t}\n\t}\n\n\t// Get the delay value which controls the scrub setting\n\tgetScrub(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-delay'])) {\n\t\t\treturn parseInt(element.dataset.onscrollDelay)\n\t\t} else {\n\t\t\treturn true // Default scrub value if no 'data-onscroll-delay' attribute is present\n\t\t}\n\t}\n\n\t// Get the start value for ScrollTrigger animation\n\tgetStart(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\tlet stickyOffset = 0\n\n\t\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\t\tstickyOffset = parseFloat(offsetValue)\n\t\t\t}\n\n\t\t\treturn (element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top top') + '+=' + stickyOffset\n\t\t}\n\t\treturn element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top bottom'\n\t}\n\n\t// Get the end value for ScrollTrigger animation\n\tgetEnd(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\tconst trigger = this.getTrigger(element)\n\t\t\tlet stickyOffset = 0\n\n\t\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\t\tstickyOffset = parseFloat(distanceValue)\n\t\t\t}\n\n\t\t\tconst stickyDistance = trigger.clientHeight - element.clientHeight - stickyOffset\n\n\t\t\treturn '+=' + stickyDistance\n\t\t} else if (this.hasAttributes(element, ['data-onscroll-speed']) && !element.hasAttribute('data-onscroll-end')) {\n\t\t\tconst scrollDistance = this.getDistanceOrSpeed(element)\n\t\t\tconst { distance } = this.getOffsetAndDistance(element)\n\n\t\t\treturn `bottom${scrollDistance >= 0 ? '+=' : '-='}${Math.abs(scrollDistance)} top`\n\t\t} else {\n\t\t\treturn element.dataset.onscrollEnd ? element.dataset.onscrollEnd : 'bottom top'\n\t\t}\n\t}\n\n\t// Enable debug mode for logging\n\tdebugMode(element, index) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-debug'])) {\n\t\t\tconst { offset, distance } = this.getOffsetAndDistance(element)\n\t\t\tconsole.group(`OnscrollDetection() debug instance (#${index + 1})`)\n\t\t\tconsole.log({\n\t\t\t\telement: element,\n\t\t\t\ttrigger: this.getTrigger(element),\n\t\t\t\ttriggerStart: this.getStart(element),\n\t\t\t\ttriggerEnd: this.getEnd(element),\n\t\t\t\tauto: this.hasAttributes(element, ['data-onscroll-auto']),\n\t\t\t\toffsetBefore: offset,\n\t\t\t\toffsetAfter: this.getDistanceOrSpeed(element),\n\t\t\t\tdelay: this.getScrub(element),\n\t\t\t\tscreen: this.getScreen(element),\n\t\t\t\tspeed: this.hasAttributes(element, ['data-onscroll-speed'])\n\t\t\t\t\t? element.dataset.onscrollSpeed +\n\t\t\t\t\t  ' calculated at ' +\n\t\t\t\t\t  (1 - parseFloat(element.dataset.onscrollSpeed)) *\n\t\t\t\t\t\t\t(ScrollTrigger.maxScroll(window) - (this.scrollTrigger ? this.scrollTrigger.start : 0))\n\t\t\t\t\t: null,\n\t\t\t\tdirection: this.hasAttributes(element, ['data-onscroll-direction'])\n\t\t\t\t\t? element.dataset.onscrollDirection\n\t\t\t\t\t: 'y',\n\t\t\t\treverse: this.hasAttributes(element, ['data-onscroll-reverse']),\n\t\t\t\tsticky: this.hasAttributes(element, ['data-onscroll-sticky']) ? true : false,\n\t\t\t\tanimateFrom: this.getAnimateFrom(element),\n\t\t\t\tanimateTo: this.getAnimateTo(element),\n\t\t\t})\n\t\t\tconsole.groupEnd()\n\t\t}\n\t}\n\n\t// Refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Restart the animations and reinitialize the ScrollTrigger instances\n\trestart() {\n\t\t// Stop the current animations and remove ScrollTriggers\n\t\tthis.stop()\n\n\t\t// Kill all existing ScrollTrigger instances\n\t\tScrollTrigger.getAll().forEach((trigger) => trigger.kill())\n\n\t\t// Refresh ScrollTrigger\n\t\tScrollTrigger.refresh()\n\n\t\t// Reapply animations and initialize ScrollTrigger\n\t\tthis.init()\n\t}\n\n\t// Stop animations and ScrollTriggers\n\tstop(target = null) {\n\t\tif (target) {\n\t\t\t// Stop animation and remove the ScrollTrigger for a specific target\n\t\t\tconst animationData = this.triggers.get(target)\n\t\t\tif (animationData) {\n\t\t\t\tanimationData.gsapAnimation.kill()\n\t\t\t\tthis.triggers.delete(target)\n\t\t\t}\n\t\t} else {\n\t\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\t\tthis.triggers.forEach(({ gsapAnimation }) => {\n\t\t\t\tgsapAnimation.kill()\n\t\t\t})\n\t\t\tthis.triggers.clear()\n\t\t}\n\t}\n\n\t// Update animation for a specific target with new fromProperties and toProperties\n\tupdate(target, fromProperties, toProperties) {\n\t\tconst animationData = this.triggers.get(target)\n\n\t\tif (animationData) {\n\t\t\t// Stop the existing animation\n\t\t\tanimationData.gsapAnimation.kill()\n\n\t\t\t// Reinitialize the animation with updated properties\n\t\t\tconst gsapAnimation = gsap.fromTo(animationData.element, fromProperties, toProperties)\n\t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t\t\t\t...animationData,\n\t\t\t\tfromProperties,\n\t\t\t\ttoProperties,\n\t\t\t\tgsapAnimation,\n\t\t\t})\n\t\t}\n\t}\n\n\t// Destroy the OnscrollDetection instance\n\tdestroy() {\n\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\tthis.stop()\n\t\tthis.triggers = null\n\t}\n}\n"],"names":["OnscrollDetection","options","this","elements","screen","triggers","Map","classDefaults","_extends","scrollingClass","scrolledClass","stickyClass","stuckClass","init","_proto","prototype","_this","gsap","utils","toArray","forEach","element","index","trigger","getTrigger","getScreen","matchMedia","fromProperties","getFromProperties","toProperties","getToProperties","add","gsapAnimation","fromTo","set","scrollTrigger","debugMode","hasAttributes","hasAttribute","parentElement","document","querySelector","dataset","onscrollTrigger","console","error","onscrollScreen","animateFrom","getAnimateFrom","offset","getOffsetAndDistance","bottom","top","x","getDirection","y","_this2","animateTo","getAnimateTo","stickyProperties","getStickyProperties","isSticky","getX","getY","ease","start","getStart","end","getEnd","invalidateOnRefresh","pin","pinSpacing","scrub","getScrub","markers","onEnter","classList","onLeave","remove","onEnterBack","onLeaveBack","attrs","every","attr","JSON","parse","onscrollFrom","onscrollTo","getOffset","parseInt","onscrollOffset","onscrollDirection","getDistanceOrSpeed","distance","triggerHeight","offsetHeight","_element$dataset$onsc","split","offsetValue","distanceValue","trim","endsWith","parseFloat","viewportHeight","window","innerHeight","scrollSpeed","onscrollSpeed","additionalDistance","includes","_scrollSpeed$split$ma","map","percentage","triggerElement","autoDistance","Math","abs","scrollDistance","onscrollDelay","stickyOffset","_element$dataset$onsc2","onscrollStart","_element$dataset$onsc3","clientHeight","onscrollEnd","group","log","triggerStart","triggerEnd","auto","offsetBefore","offsetAfter","delay","speed","ScrollTrigger","maxScroll","direction","reverse","sticky","groupEnd","refresh","restart","stop","getAll","kill","target","animationData","get","_ref","clear","update","destroy"],"mappings":"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"}