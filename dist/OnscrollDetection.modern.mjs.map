{"version":3,"file":"OnscrollDetection.modern.mjs","sources":["../src/index.js"],"sourcesContent":["export default class OnscrollDetection {\n\tconstructor(options = {}) {\n\t\t// Initialise class properties with default values or provided options\n\t\tthis.elements = options.elements || '[data-onscroll]'\n\t\tthis.screen = options.screen || '(min-width: 1025px)'\n\t\tthis.triggers = new Map()\n\n\t\t// Set class names to defaults or provided options\n\t\tthis.scrollingClass = options.scrollingClass || 'is-scrolling'\n\t\tthis.scrolledClass = options.scrolledClass || 'has-scrolled'\n\t\tthis.stickyClass = options.stickyClass || 'is-sticky'\n\t\tthis.stuckClass = options.stuckClass || 'has-stuck'\n\n\t\t// Initialise event handlers\n\t\tthis.eventHandlers = {}\n\n\t\t// Set autoStart to true by default, or use provided value\n\t\tthis.autoStart = options.autoStart !== undefined ? options.autoStart : true\n\n\t\t// Initialise the class\n\t\tif (this.autoStart) {\n\t\t\tthis.init()\n\t\t}\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\t// Convert elements to an array and loop through each\n\t\tgsap.utils.toArray(this.elements).forEach((element, index) => {\n\t\t\t// Get the trigger element\n\t\t\tconst trigger = this.getTrigger(element)\n\n\t\t\t// Get the screen media query\n\t\t\tconst screen = this.getScreen(element)\n\n\t\t\t// Create a matchMedia instance\n\t\t\tconst matchMedia = gsap.matchMedia()\n\n\t\t\t// Get the animation properties for 'from' state\n\t\t\tconst fromProperties = this.getFromProperties(element, index)\n\n\t\t\tfromProperties.startAt = { backgroundColor: 'red' }\n\t\t\tfromProperties.immediateRender = true\n\n\t\t\t// Get the animation properties for 'to' state\n\t\t\tconst toProperties = this.getToProperties(element, index, trigger)\n\n\t\t\t// Add the animation to the matchMedia instance and store the ScrollTrigger instance\n\t\t\tconst animation = matchMedia.add(screen, () => {\n\t\t\t\tconst gsapAnimation = gsap.fromTo(element, fromProperties, toProperties)\n\n\t\t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t\t\t\t\telement,\n\t\t\t\t\tfromProperties,\n\t\t\t\t\ttoProperties,\n\t\t\t\t\tgsapAnimation,\n\t\t\t\t})\n\t\t\t})\n\n\t\t\t// Enable debug mode for logging\n\t\t\tthis.debugMode(element, index)\n\t\t})\n\t}\n\n\t// Function to load and initialize the class\n\tstart() {\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Helper methods\n\ton(event, handler) {\n\t\tif (!this.eventHandlers[event]) {\n\t\t\tthis.eventHandlers[event] = []\n\t\t}\n\t\tthis.eventHandlers[event].push(handler)\n\t}\n\n\temit(event, ...args) {\n\t\tif (this.eventHandlers[event]) {\n\t\t\tthis.eventHandlers[event].forEach((handler) => handler(...args))\n\t\t}\n\t}\n\n\t// Get the trigger element for ScrollTrigger\n\tgetTrigger(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-auto']) && !element.hasAttribute('data-onscroll-trigger')) {\n\t\t\t// If data-onscroll-auto is present and data-onscroll-trigger is not, use the parent element as the trigger\n\t\t\treturn element.parentElement\n\t\t} else if (element.hasAttribute('data-onscroll-trigger')) {\n\t\t\t// If data-onscroll-trigger is present, try to find the DOM element specified by the attribute\n\t\t\tlet triggerElement = document.querySelector(element.dataset.onscrollTrigger)\n\t\t\tif (triggerElement) {\n\t\t\t\treturn triggerElement\n\t\t\t} else {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`Element specified by data-onscroll-trigger not found: ${element.dataset.onscrollTrigger}`\n\t\t\t\t)\n\t\t\t\treturn element\n\t\t\t}\n\t\t} else {\n\t\t\t// Otherwise, use the element itself as the trigger\n\t\t\treturn element\n\t\t}\n\t}\n\n\t// Get the screen media query\n\tgetScreen(element) {\n\t\treturn element.hasAttribute('data-onscroll-screen') ? element.dataset.onscrollScreen : this.screen\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetFromProperties(element, index) {\n\t\tconst animateFrom = this.getAnimateFrom(element)\n\t\tconst { offset } = this.getOffsetAndDistance(element)\n\n\t\treturn {\n\t\t\t...animateFrom,\n\t\t\tbottom: this.hasAttributes(element, ['data-onscroll-auto', 'data-onscroll-reverse']) ? 'auto' : null,\n\t\t\ttop:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-auto']) &&\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-reverse'])\n\t\t\t\t\t? 'auto'\n\t\t\t\t\t: null,\n\t\t\tx:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t\ty:\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t}\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetToProperties(element, index, trigger) {\n\t\tconst animateTo = this.getAnimateTo(element)\n\t\tconst stickyProperties = this.getStickyProperties(element)\n\t\tconst isSticky = this.hasAttributes(element, ['data-onscroll-sticky'])\n\t\tconst customEventName = element.getAttribute('data-onscroll-call')\n\n\t\t// Helper function to dispatch the custom event\n\t\tconst dispatchCustomEvent = (when, direction) => {\n\t\t\tif (customEventName) {\n\t\t\t\twindow.dispatchEvent(\n\t\t\t\t\tnew CustomEvent(customEventName, {\n\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\ttarget: element,\n\t\t\t\t\t\t\tdirection: direction === 1 ? 'down' : 'up',\n\t\t\t\t\t\t\twhen,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t...animateTo,\n\t\t\tx: this.getX(element),\n\t\t\ty: this.getY(element),\n\t\t\tease: 'none',\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: isSticky ? element : trigger,\n\t\t\t\tstart: this.getStart(element),\n\t\t\t\tend: this.getEnd(element),\n\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\tpin: stickyProperties.pin,\n\t\t\t\tpinSpacing: stickyProperties.pinSpacing,\n\t\t\t\tscrub: this.getScrub(element),\n\t\t\t\tmarkers: this.hasAttributes(element, ['data-onscroll-debug']),\n\t\t\t\tonEnter: ({ direction }) => {\n\t\t\t\t\telement.classList.add(this.scrollingClass, this.scrolledClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.add(this.stickyClass, this.stuckClass)\n\t\t\t\t\t}\n\t\t\t\t\tdispatchCustomEvent('onEnter', direction)\n\t\t\t\t\tthis.emit('onEnter', element)\n\t\t\t\t},\n\t\t\t\tonLeave: ({ direction }) => {\n\t\t\t\t\telement.classList.remove(this.scrollingClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.remove(this.stickyClass)\n\t\t\t\t\t}\n\t\t\t\t\tdispatchCustomEvent('onLeave', direction)\n\t\t\t\t\tthis.emit('onLeave', element)\n\t\t\t\t},\n\t\t\t\tonEnterBack: ({ direction }) => {\n\t\t\t\t\telement.classList.add(this.scrollingClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.add(this.stickyClass)\n\t\t\t\t\t}\n\t\t\t\t\tdispatchCustomEvent('onEnterBack', direction)\n\t\t\t\t\tthis.emit('onEnterBack', element)\n\t\t\t\t},\n\t\t\t\tonLeaveBack: ({ direction }) => {\n\t\t\t\t\telement.classList.remove(this.scrollingClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.remove(this.stickyClass)\n\t\t\t\t\t}\n\t\t\t\t\tdispatchCustomEvent('onLeaveBack', direction)\n\t\t\t\t\tthis.emit('onLeaveBack', element)\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t}\n\n\t// Get the sticky properties for ScrollTrigger animation\n\tgetStickyProperties(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn { pin: true, pinSpacing: false }\n\t\t} else {\n\t\t\treturn { pin: false, pinSpacing: true }\n\t\t}\n\t}\n\n\t// Check if an element has all the specified attributes\n\thasAttributes(element, attrs) {\n\t\treturn attrs.every((attr) => element.hasAttribute(attr))\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetAnimateFrom(element) {\n\t\treturn element.hasAttribute('data-onscroll-from') ? JSON.parse(element.dataset.onscrollFrom) : []\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetAnimateTo(element) {\n\t\treturn element.hasAttribute('data-onscroll-to') ? JSON.parse(element.dataset.onscrollTo) : []\n\t}\n\n\t// Get the offset value\n\tgetOffset(element) {\n\t\treturn element.hasAttribute('data-onscroll-offset') ? parseInt(element.dataset.onscrollOffset) : null\n\t}\n\n\t// Get the scroll direction\n\tgetDirection(element) {\n\t\treturn element.dataset.onscrollDirection ? element.dataset.onscrollDirection : 'y'\n\t}\n\n\t// Get the 'x' value for ScrollTrigger animation\n\tgetX(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn null\n\t\t}\n\t\tif (\n\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the 'y' value for ScrollTrigger animation\n\tgetY(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn null\n\t\t}\n\t\tif (\n\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the offset and distance values\n\tgetOffsetAndDistance(element) {\n\t\t// Check if the element has the data-onscroll-sticky attribute\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn { offset: null, distance: null }\n\t\t}\n\n\t\tlet offset = null\n\t\tlet distance = null\n\t\tconst triggerElement = this.getTrigger(element)\n\t\tconst triggerHeight = triggerElement.offsetHeight\n\n\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\n\t\t\t// If the offset value ends with a '%', calculate it as a percentage of the trigger height\n\t\t\tif (offsetValue.trim().endsWith('%')) {\n\t\t\t\tconst offsetPercentage = parseFloat(offsetValue) / 100\n\t\t\t\toffset = offsetPercentage * triggerHeight\n\t\t\t} else {\n\t\t\t\toffset = parseFloat(offsetValue)\n\t\t\t}\n\n\t\t\t// If the distance value ends with a '%', calculate it as a percentage of the trigger height\n\t\t\tif (distanceValue.trim().endsWith('%')) {\n\t\t\t\tconst distancePercentage = parseFloat(distanceValue) / 100\n\t\t\t\tdistance = distancePercentage * triggerHeight\n\t\t\t} else {\n\t\t\t\tdistance = parseFloat(distanceValue)\n\t\t\t}\n\t\t}\n\n\t\treturn { offset, distance }\n\t}\n\n\t// Get the distance or speed value for ScrollTrigger animation\n\tgetDistanceOrSpeed(element) {\n\t\tconst { distance } = this.getOffsetAndDistance(element)\n\t\tconst viewportHeight = window.innerHeight\n\t\tlet scrollSpeed = element.dataset.onscrollSpeed\n\t\tlet additionalDistance = 0\n\n\t\t// Check if there are two values\n\t\tif (scrollSpeed && scrollSpeed.includes(',')) {\n\t\t\tconst [speed, percentage] = scrollSpeed.split(',').map(parseFloat)\n\n\t\t\t// Update the scrollSpeed and calculate the additional distance\n\t\t\tscrollSpeed = speed\n\t\t\tadditionalDistance = (percentage / 100) * viewportHeight\n\n\t\t\t// If scrollSpeed is negative, subtract the additional distance\n\t\t\tif (scrollSpeed < 0) {\n\t\t\t\tadditionalDistance *= -1\n\t\t\t}\n\t\t} else {\n\t\t\tscrollSpeed = parseFloat(scrollSpeed || '0')\n\t\t}\n\n\t\tif (this.hasAttributes(element, ['data-onscroll-auto'])) {\n\t\t\tconst triggerElement = this.getTrigger(element)\n\t\t\tconst autoDistance = Math.abs(triggerElement.offsetHeight - element.offsetHeight)\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -autoDistance : autoDistance\n\t\t} else if (this.hasAttributes(element, ['data-onscroll-speed'])) {\n\t\t\tconst elementHeight = element.offsetHeight\n\t\t\tconst scrollDistance = scrollSpeed * elementHeight + additionalDistance\n\t\t\treturn scrollDistance\n\t\t} else if (distance !== null) {\n\t\t\treturn distance\n\t\t}\n\t}\n\n\t// Get the delay value which controls the scrub setting\n\tgetScrub(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-delay'])) {\n\t\t\treturn parseInt(element.dataset.onscrollDelay)\n\t\t} else {\n\t\t\treturn true // Default scrub value if no 'data-onscroll-delay' attribute is present\n\t\t}\n\t}\n\n\t// Get the start value for ScrollTrigger animation\n\tgetStart(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\tlet stickyOffset = 0\n\n\t\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\t\tstickyOffset = parseFloat(offsetValue)\n\t\t\t}\n\n\t\t\treturn (element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top top') + '+=' + stickyOffset\n\t\t} else if (\n\t\t\tthis.hasAttributes(element, ['data-onscroll-preset', 'data-onscroll-offset']) &&\n\t\t\tthis.getDirection(element) !== 'x' &&\n\t\t\t!this.hasAttributes(element, ['data-onscroll-start', 'data-onscroll-sticky'])\n\t\t) {\n\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\tlet positionElement = parseFloat(offsetValue) < 0 ? 'top+=' + offsetValue : 'top+=0'\n\t\t\tlet positionMarker = 'bottom'\n\n\t\t\treturn positionElement + ' ' + positionMarker\n\t\t} else {\n\t\t\treturn element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top bottom'\n\t\t}\n\t}\n\n\t// Get the end value for ScrollTrigger animation\n\tgetEnd(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\tconst trigger = this.getTrigger(element)\n\t\t\tlet stickyOffset = 0\n\n\t\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\t\tstickyOffset = parseFloat(distanceValue)\n\t\t\t}\n\n\t\t\tconst stickyDistance = trigger.clientHeight - element.clientHeight - stickyOffset\n\n\t\t\treturn '+=' + stickyDistance\n\t\t} else if (this.hasAttributes(element, ['data-onscroll-speed']) && !element.hasAttribute('data-onscroll-end')) {\n\t\t\tconst scrollDistance = this.getDistanceOrSpeed(element)\n\t\t\tconst { distance } = this.getOffsetAndDistance(element)\n\n\t\t\treturn `bottom${scrollDistance >= 0 ? '+=' : '-='}${Math.abs(scrollDistance)} top`\n\t\t} else if (\n\t\t\tthis.hasAttributes(element, ['data-onscroll-preset', 'data-onscroll-offset']) &&\n\t\t\tthis.getDirection(element) !== 'x' &&\n\t\t\t!this.hasAttributes(element, ['data-onscroll-end', 'data-onscroll-sticky'])\n\t\t) {\n\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\tlet positionElement = 'bottom+=' + distanceValue\n\t\t\tlet positionMarker = 'top'\n\n\t\t\treturn positionElement + ' ' + positionMarker\n\t\t} else {\n\t\t\treturn element.dataset.onscrollEnd ? element.dataset.onscrollEnd : 'bottom top'\n\t\t}\n\t}\n\n\t// Enable debug mode for logging\n\tdebugMode(element, index) {\n\t\tif (!this.hasAttributes(element, ['data-onscroll-debug'])) return;\n\n\t\tconst { offset, distance } = this.getOffsetAndDistance(element);\n\t\tlet speedMultiplier;\n\t\tlet speedViewportPercentage;\n\n\t\tif (this.hasAttributes(element, ['data-onscroll-speed'])) {\n\t\t\t[speedMultiplier, speedViewportPercentage] = element.dataset.onscrollSpeed.split(',');\n\t\t}\n\n\t\tconst attrs = element.dataset;\n\t\tconst hasSpeed = this.hasAttributes(element, ['data-onscroll-speed']);\n\t\tconst hasPreset = this.hasAttributes(element, ['data-onscroll-preset']);\n\t\tconst hasSticky = this.hasAttributes(element, ['data-onscroll-sticky']);\n\t\tconst hasReverse = this.hasAttributes(element, ['data-onscroll-reverse']);\n\n\t\tconsole.group(`OnscrollDetection() debug instance (#${index + 1})`);\n\t\tconsole.log({\n\t\t\telement: element,\n\t\t\ttrigger: this.getTrigger(element),\n\t\t\ttriggerStart: this.getStart(element),\n\t\t\ttriggerEnd: this.getEnd(element),\n\t\t\tauto: this.hasAttributes(element, ['data-onscroll-auto']),\n\t\t\toffsetBefore: offset,\n\t\t\toffsetAfter: this.getDistanceOrSpeed(element),\n\t\t\tdelay: this.getScrub(element),\n\t\t\tscreen: this.getScreen(element),\n\t\t\tspeed: hasSpeed\n\t\t\t\t? `${parseFloat(\n\t\t\t\t\tspeedMultiplier * element.clientHeight +\n\t\t\t\t\t(speedViewportPercentage / 100) * window.innerHeight\n\t\t\t\t)} (${parseFloat(speedMultiplier)}x element height + ${parseFloat(speedViewportPercentage)}% of the viewport height)`\n\t\t\t\t: null,\n\t\t\tdirection: this.hasAttributes(element, ['data-onscroll-direction'])\n\t\t\t\t? attrs.onscrollDirection\n\t\t\t\t: 'y',\n\t\t\tpreset: hasPreset,\n\t\t\treverse: hasReverse,\n\t\t\tsticky: hasSticky,\n\t\t\tanimateFrom: this.getAnimateFrom(element),\n\t\t\tanimateTo: this.getAnimateTo(element),\n\t\t\tcustomEvent: this.hasAttributes(element, ['data-onscroll-call'])\n\t\t\t\t? attrs.onscrollCall\n\t\t\t\t: null,\n\t\t});\n\n\t\tconst warnings = [\n\t\t\t{condition: this.hasAttributes(element, ['data-onscroll-offset']) && hasSpeed, message: '`offset` and `speed` should not be used together'},\n\t\t\t{condition: hasPreset && (this.hasAttributes(element, ['data-onscroll-start']) || this.hasAttributes(element, ['data-onscroll-end'])), message: '`preset` should not be used in conjunction with `start` or `end` settings'},\n\t\t\t{condition: hasSticky && hasSpeed, message: '`sticky` should not be used in conjunction with `speed`'},\n\t\t\t{condition: hasReverse && (!this.hasAttributes(element, ['data-onscroll-auto']) || this.hasAttributes(element, ['data-onscroll-offset']) || hasSticky || hasSpeed), message: '`reverse` is not compatible with `offset`, `speed` or `sticky` and should only be used in conjunction with `auto`'},\n\t\t\t{condition: hasSpeed && hasPreset, message: '`preset` has no effect in conjunction with `speed` setting'},\n\t\t\t{condition: this.getDirection(element) === 'x' && hasPreset, message: '`preset` has no effect in conjunction with `x` direction'}\n\t\t];\n\n\t\twarnings.forEach(warning => warning.condition && console.warn(warning.message));\n\t\tconsole.groupEnd();\n\t}\n\n\t// Fetch a trigger\n\tfetch(elementOrIndex) {\n\t\tif (typeof elementOrIndex === 'number') {\n\t\t\t// Treat argument as an index\n\t\t\tconst keys = Array.from(this.triggers.keys())\n\t\t\treturn keys[elementOrIndex]\n\t\t} else {\n\t\t\t// Assume argument is a DOM element\n\t\t\tlet trigger = null\n\t\t\tthis.triggers.forEach((value, key) => {\n\t\t\t\tif (value.element === elementOrIndex) {\n\t\t\t\t\ttrigger = key\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn trigger\n\t\t}\n\t}\n\n\t// Refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\n\t\t// Emit event after refresh is done\n\t\tthis.emit('refresh')\n\t}\n\n\t// Restart the animations and reinitialize the ScrollTrigger instances\n\trestart() {\n\t\t// Stop the current animations and remove ScrollTriggers\n\t\tthis.stop()\n\n\t\t// Kill all existing ScrollTrigger instances\n\t\tScrollTrigger.getAll().forEach((trigger) => trigger.kill())\n\n\t\t// Refresh ScrollTrigger\n\t\tScrollTrigger.refresh()\n\n\t\t// Reapply animations and initialize ScrollTrigger\n\t\tthis.init()\n\n\t\t// Emit event after restart is done\n\t\tthis.emit('restart')\n\t}\n\n\t// Stop animations and ScrollTriggers\n\tstop(target = null) {\n\t\tif (target) {\n\t\t\t// Stop animation and remove the ScrollTrigger for a specific target\n\t\t\tconst animationData = this.triggers.get(target)\n\t\t\tif (animationData) {\n\t\t\t\tanimationData.gsapAnimation.kill()\n\t\t\t\tthis.triggers.delete(target)\n\t\t\t}\n\t\t} else {\n\t\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\t\tthis.triggers.forEach(({ gsapAnimation }) => {\n\t\t\t\tgsapAnimation.kill()\n\t\t\t})\n\t\t\tthis.triggers.clear()\n\t\t}\n\n\t\t// Emit event after stop is done\n\t\tthis.emit('stop', target)\n\t}\n\n\t// Update animation for a specific target with new fromProperties and toProperties\n\t// \tupdate(target, fromProperties, toProperties) {\n\t// \t\tconst animationData = this.triggers.get(target)\n\t//\n\t// \t\tif (animationData) {\n\t// \t\t\t// Stop the existing animation\n\t// \t\t\tanimationData.gsapAnimation.kill()\n\t//\n\t// \t\t\t// Reinitialize the animation with updated properties\n\t// \t\t\tconst gsapAnimation = gsap.fromTo(animationData.element, fromProperties, toProperties)\n\t// \t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t// \t\t\t\t...animationData,\n\t// \t\t\t\tfromProperties,\n\t// \t\t\t\ttoProperties,\n\t// \t\t\t\tgsapAnimation,\n\t// \t\t\t})\n\t// \t\t}\n\t// \t}\n\n\t// Destroy the OnscrollDetection instance\n\tdestroy() {\n\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\tthis.stop()\n\t\tthis.triggers = null\n\t}\n}\n"],"names":["OnscrollDetection","constructor","options","this","elements","screen","triggers","Map","scrollingClass","scrolledClass","stickyClass","stuckClass","eventHandlers","autoStart","undefined","init","gsap","utils","toArray","forEach","element","index","trigger","getTrigger","getScreen","matchMedia","fromProperties","getFromProperties","startAt","backgroundColor","immediateRender","toProperties","getToProperties","add","gsapAnimation","fromTo","set","scrollTrigger","debugMode","start","on","event","handler","push","emit","args","hasAttributes","hasAttribute","parentElement","document","querySelector","dataset","onscrollTrigger","console","error","onscrollScreen","animateFrom","getAnimateFrom","offset","getOffsetAndDistance","_extends","bottom","top","x","getDirection","y","animateTo","getAnimateTo","stickyProperties","getStickyProperties","isSticky","customEventName","getAttribute","dispatchCustomEvent","when","direction","window","dispatchEvent","CustomEvent","detail","target","getX","getY","ease","getStart","end","getEnd","invalidateOnRefresh","pin","pinSpacing","scrub","getScrub","markers","onEnter","classList","onLeave","remove","onEnterBack","onLeaveBack","attrs","every","attr","JSON","parse","onscrollFrom","onscrollTo","getOffset","parseInt","onscrollOffset","onscrollDirection","getDistanceOrSpeed","distance","triggerHeight","offsetHeight","offsetValue","distanceValue","split","trim","endsWith","parseFloat","viewportHeight","innerHeight","scrollSpeed","onscrollSpeed","additionalDistance","includes","speed","percentage","map","triggerElement","autoDistance","Math","abs","onscrollDelay","stickyOffset","onscrollStart","positionElement","clientHeight","scrollDistance","onscrollEnd","speedMultiplier","speedViewportPercentage","hasSpeed","hasPreset","hasSticky","hasReverse","group","log","triggerStart","triggerEnd","auto","offsetBefore","offsetAfter","delay","preset","reverse","sticky","customEvent","onscrollCall","condition","message","warning","warn","groupEnd","fetch","elementOrIndex","Array","from","keys","value","key","refresh","ScrollTrigger","restart","stop","getAll","kill","animationData","get","delete","clear","destroy"],"mappings":"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"}