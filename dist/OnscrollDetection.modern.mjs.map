{"version":3,"file":"OnscrollDetection.modern.mjs","sources":["../src/index.js"],"sourcesContent":["export default class OnscrollDetection {\n\tconstructor(options = {}) {\n\t\t// Initialise class properties with default values or provided options\n\t\tthis.elements = options.elements || '[data-onscroll]'\n\t\tthis.screen = options.screen || '(min-width: 1025px)'\n\t\tthis.triggers = new Map()\n\n\t\t// Initialise the class\n\t\tthis.init()\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\t// Convert elements to an array and loop through each\n\t\tgsap.utils.toArray(this.elements).forEach((element, index) => {\n\t\t\t// Get the trigger element\n\t\t\tconst trigger = this.getTrigger(element)\n\n\t\t\t// Get the screen media query\n\t\t\tconst screen = this.getScreen(element)\n\n\t\t\t// Create a matchMedia instance\n\t\t\tconst matchMedia = gsap.matchMedia()\n\n\t\t\t// Get the animation properties for 'from' state\n\t\t\tconst fromProperties = this.getFromProperties(element, index)\n\n\t\t\t// Get the animation properties for 'to' state\n\t\t\tconst toProperties = this.getToProperties(element, index, trigger)\n\n\t\t\t// Add the animation to the matchMedia instance and store the ScrollTrigger instance\n\t\t\tconst animation = matchMedia.add(screen, () => {\n\t\t\t\tconst gsapAnimation = gsap.fromTo(element, fromProperties, toProperties)\n\n\t\t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t\t\t\t\telement,\n\t\t\t\t\tfromProperties,\n\t\t\t\t\ttoProperties,\n\t\t\t\t\tgsapAnimation,\n\t\t\t\t})\n\t\t\t})\n\n\t\t\t// Enable debug mode for logging\n\t\t\tthis.debugMode(element, index)\n\t\t})\n\t}\n\n\t// Helper methods\n\n\t// Get the trigger element for ScrollTrigger\n\tgetTrigger(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-auto']) && !element.hasAttribute('data-onscroll-trigger')) {\n\t\t\t// If data-onscroll-auto is present and data-onscroll-trigger is not, use the parent element as the trigger\n\t\t\treturn element.parentElement\n\t\t} else if (element.hasAttribute('data-onscroll-trigger')) {\n\t\t\t// If data-onscroll-trigger is present, try to find the DOM element specified by the attribute\n\t\t\tlet triggerElement = document.querySelector(element.dataset.onscrollTrigger)\n\t\t\tif (triggerElement) {\n\t\t\t\treturn triggerElement\n\t\t\t} else {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`Element specified by data-onscroll-trigger not found: ${element.dataset.onscrollTrigger}`\n\t\t\t\t)\n\t\t\t\treturn element\n\t\t\t}\n\t\t} else {\n\t\t\t// Otherwise, use the element itself as the trigger\n\t\t\treturn element\n\t\t}\n\t}\n\n\t// Get the screen media query\n\tgetScreen(element) {\n\t\treturn element.hasAttribute('data-onscroll-screen') ? element.dataset.onscrollScreen : this.screen\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetFromProperties(element, index) {\n\t\tconst animateFrom = this.getAnimateFrom(element)\n\t\tconst { offset } = this.getOffsetAndDistance(element)\n\n\t\treturn {\n\t\t\t...animateFrom,\n\t\t\tbottom: this.hasAttributes(element, ['data-onscroll-auto', 'data-onscroll-reverse']) ? 'auto' : null,\n\t\t\ttop:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-auto']) &&\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-reverse'])\n\t\t\t\t\t? 'auto'\n\t\t\t\t\t: null,\n\t\t\tx:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t\ty:\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t}\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetToProperties(element, index, trigger) {\n\t\tconst animateTo = this.getAnimateTo(element)\n\t\tconst stickyProperties = this.getStickyProperties(element)\n\n\t\treturn {\n\t\t\t...animateTo,\n\t\t\tx: this.getX(element),\n\t\t\ty: this.getY(element),\n\t\t\tease: 'none',\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: this.hasAttributes(element, ['data-onscroll-sticky']) ? element : trigger,\n\t\t\t\tstart: this.getStart(element),\n\t\t\t\tend: this.getEnd(element),\n\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\tpin: stickyProperties.pin,\n\t\t\t\tpinSpacing: stickyProperties.pinSpacing,\n\t\t\t\tscrub: this.getScrub(element),\n\t\t\t\tmarkers: this.hasAttributes(element, ['data-onscroll-debug']),\n\t\t\t},\n\t\t}\n\t}\n\n\t// Get the sticky properties for ScrollTrigger animation\n\tgetStickyProperties(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn { pin: true, pinSpacing: false }\n\t\t} else {\n\t\t\treturn { pin: false, pinSpacing: true }\n\t\t}\n\t}\n\n\t// Check if an element has all the specified attributes\n\thasAttributes(element, attrs) {\n\t\treturn attrs.every((attr) => element.hasAttribute(attr))\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetAnimateFrom(element) {\n\t\treturn element.hasAttribute('data-onscroll-from') ? JSON.parse(element.dataset.onscrollFrom) : []\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetAnimateTo(element) {\n\t\treturn element.hasAttribute('data-onscroll-to') ? JSON.parse(element.dataset.onscrollTo) : []\n\t}\n\n\t// Get the offset value\n\tgetOffset(element) {\n\t\treturn element.hasAttribute('data-onscroll-offset') ? parseInt(element.dataset.onscrollOffset) : null\n\t}\n\n\t// Get the scroll direction\n\tgetDirection(element) {\n\t\treturn element.dataset.onscrollDirection\n\t}\n\n\t// Get the 'x' value for ScrollTrigger animation\n\tgetX(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn null\n\t\t}\n\t\tif (\n\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the 'y' value for ScrollTrigger animation\n\tgetY(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn null\n\t\t}\n\t\tif (\n\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the offset and distance values\n\tgetOffsetAndDistance(element) {\n\t\t// Check if the element has the data-onscroll-sticky attribute\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn { offset: null, distance: null }\n\t\t}\n\n\t\tlet offset = null\n\t\tlet distance = null\n\t\tconst triggerElement = this.getTrigger(element)\n\t\tconst triggerHeight = triggerElement.offsetHeight\n\n\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\n\t\t\t// If the offset value ends with a '%', calculate it as a percentage of the trigger height\n\t\t\tif (offsetValue.trim().endsWith('%')) {\n\t\t\t\tconst offsetPercentage = parseFloat(offsetValue) / 100\n\t\t\t\toffset = offsetPercentage * triggerHeight\n\t\t\t} else {\n\t\t\t\toffset = parseFloat(offsetValue)\n\t\t\t}\n\n\t\t\t// If the distance value ends with a '%', calculate it as a percentage of the trigger height\n\t\t\tif (distanceValue.trim().endsWith('%')) {\n\t\t\t\tconst distancePercentage = parseFloat(distanceValue) / 100\n\t\t\t\tdistance = distancePercentage * triggerHeight\n\t\t\t} else {\n\t\t\t\tdistance = parseFloat(distanceValue)\n\t\t\t}\n\t\t}\n\n\t\treturn { offset, distance }\n\t}\n\n\t// Get the distance or speed value for ScrollTrigger animation\n\tgetDistanceOrSpeed(element) {\n\t\tconst { distance } = this.getOffsetAndDistance(element)\n\t\tconst viewportHeight = window.innerHeight\n\t\tlet scrollSpeed = element.dataset.onscrollSpeed\n\t\tlet additionalDistance = 0\n\n\t\t// Check if there are two values\n\t\tif (scrollSpeed && scrollSpeed.includes(',')) {\n\t\t\tconst [speed, percentage] = scrollSpeed.split(',').map(parseFloat)\n\n\t\t\t// Update the scrollSpeed and calculate the additional distance\n\t\t\tscrollSpeed = speed\n\t\t\tadditionalDistance = (percentage / 100) * viewportHeight\n\n\t\t\t// If scrollSpeed is negative, subtract the additional distance\n\t\t\tif (scrollSpeed < 0) {\n\t\t\t\tadditionalDistance *= -1\n\t\t\t}\n\t\t} else {\n\t\t\tscrollSpeed = parseFloat(scrollSpeed || '0')\n\t\t}\n\n\t\tif (this.hasAttributes(element, ['data-onscroll-auto'])) {\n\t\t\tconst triggerElement = this.getTrigger(element)\n\t\t\tconst autoDistance = Math.abs(triggerElement.offsetHeight - element.offsetHeight)\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -autoDistance : autoDistance\n\t\t} else if (this.hasAttributes(element, ['data-onscroll-speed'])) {\n\t\t\tconst elementHeight = element.offsetHeight\n\t\t\tconst scrollDistance = scrollSpeed * elementHeight + additionalDistance\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -scrollDistance : scrollDistance\n\t\t} else if (distance !== null) {\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -distance : distance\n\t\t}\n\t}\n\n\t// Get the delay value which controls the scrub setting\n\tgetScrub(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-delay'])) {\n\t\t\treturn parseInt(element.dataset.onscrollDelay)\n\t\t} else {\n\t\t\treturn true // Default scrub value if no 'data-onscroll-delay' attribute is present\n\t\t}\n\t}\n\n\t// Get the start value for ScrollTrigger animation\n\tgetStart(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\tlet stickyOffset = 0\n\n\t\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\t\tstickyOffset = parseFloat(offsetValue)\n\t\t\t}\n\n\t\t\treturn ( element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top top' ) + '+=' + stickyOffset\n\t\t}\n\t\treturn element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top bottom'\n\t}\n\n\t// Get the end value for ScrollTrigger animation\n\tgetEnd(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\tconst trigger = this.getTrigger(element)\n\t\t\tlet stickyOffset = 0\n\n\t\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\t\tstickyOffset = parseFloat(distanceValue)\n\t\t\t}\n\n\t\t\tconst stickyDistance = trigger.clientHeight - element.clientHeight - stickyOffset\n\n\t\t\treturn '+=' + stickyDistance\n\t\t} else if (this.hasAttributes(element, ['data-onscroll-speed']) && !element.hasAttribute('data-onscroll-end')) {\n\t\t\tconst scrollDistance = this.getDistanceOrSpeed(element)\n\t\t\tconst { distance } = this.getOffsetAndDistance(element)\n\n\t\t\treturn `bottom${scrollDistance >= 0 ? '+=' : '-='}${Math.abs(scrollDistance)} top`\n\t\t} else {\n\t\t\treturn element.dataset.onscrollEnd ? element.dataset.onscrollEnd : 'bottom top'\n\t\t}\n\t}\n\n\t// Enable debug mode for logging\n\tdebugMode(element, index) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-debug'])) {\n\t\t\tconst { offset, distance } = this.getOffsetAndDistance(element)\n\t\t\tconsole.group(`OnscrollDetection() debug instance (#${index + 1})`)\n\t\t\tconsole.log({\n\t\t\t\telement: element,\n\t\t\t\ttrigger: this.getTrigger(element),\n\t\t\t\ttriggerStart: this.getStart(element),\n\t\t\t\ttriggerEnd: this.getEnd(element),\n\t\t\t\tauto: this.hasAttributes(element, ['data-onscroll-auto']),\n\t\t\t\toffsetBefore: offset,\n\t\t\t\toffsetAfter: this.getDistanceOrSpeed(element),\n\t\t\t\tdelay: this.getScrub(element),\n\t\t\t\tscreen: this.getScreen(element),\n\t\t\t\tspeed: this.hasAttributes(element, ['data-onscroll-speed'])\n\t\t\t\t\t? element.dataset.onscrollSpeed +\n\t\t\t\t\t  ' calculated at ' +\n\t\t\t\t\t  (1 - parseFloat(element.dataset.onscrollSpeed)) *\n\t\t\t\t\t\t\t(ScrollTrigger.maxScroll(window) - (this.scrollTrigger ? this.scrollTrigger.start : 0))\n\t\t\t\t\t: null,\n\t\t\t\tdirection: this.hasAttributes(element, ['data-onscroll-direction'])\n\t\t\t\t\t? element.dataset.onscrollDirection\n\t\t\t\t\t: 'y',\n\t\t\t\treverse: this.hasAttributes(element, ['data-onscroll-reverse']),\n\t\t\t\tsticky: this.hasAttributes(element, ['data-onscroll-sticky']) ? true : false,\n\t\t\t\tanimateFrom: this.getAnimateFrom(element),\n\t\t\t\tanimateTo: this.getAnimateTo(element),\n\t\t\t})\n\t\t\tconsole.groupEnd()\n\t\t}\n\t}\n\n\t// Refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Restart the animations and reinitialize the ScrollTrigger instances\n\trestart() {\n\t\t// Stop the current animations and remove ScrollTriggers\n\t\tthis.stop()\n\n\t\t// Kill all existing ScrollTrigger instances\n\t\tScrollTrigger.getAll().forEach((trigger) => trigger.kill())\n\n\t\t// Refresh ScrollTrigger\n\t\tScrollTrigger.refresh()\n\n\t\t// Reapply animations and initialize ScrollTrigger\n\t\tthis.init()\n\t}\n\n\t// Stop animations and ScrollTriggers\n\tstop(target = null) {\n\t\tif (target) {\n\t\t\t// Stop animation and remove the ScrollTrigger for a specific target\n\t\t\tconst animationData = this.triggers.get(target)\n\t\t\tif (animationData) {\n\t\t\t\tanimationData.gsapAnimation.kill()\n\t\t\t\tthis.triggers.delete(target)\n\t\t\t}\n\t\t} else {\n\t\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\t\tthis.triggers.forEach(({ gsapAnimation }) => {\n\t\t\t\tgsapAnimation.kill()\n\t\t\t})\n\t\t\tthis.triggers.clear()\n\t\t}\n\t}\n\n\t// Update animation for a specific target with new fromProperties and toProperties\n\tupdate(target, fromProperties, toProperties) {\n\t\tconst animationData = this.triggers.get(target)\n\n\t\tif (animationData) {\n\t\t\t// Stop the existing animation\n\t\t\tanimationData.gsapAnimation.kill()\n\n\t\t\t// Reinitialize the animation with updated properties\n\t\t\tconst gsapAnimation = gsap.fromTo(animationData.element, fromProperties, toProperties)\n\t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t\t\t\t...animationData,\n\t\t\t\tfromProperties,\n\t\t\t\ttoProperties,\n\t\t\t\tgsapAnimation,\n\t\t\t})\n\t\t}\n\t}\n\n\t// Destroy the OnscrollDetection instance\n\tdestroy() {\n\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\tthis.stop()\n\t\tthis.triggers = null\n\t}\n}\n"],"names":["OnscrollDetection","constructor","options","this","elements","screen","triggers","Map","init","gsap","utils","toArray","forEach","element","index","trigger","getTrigger","getScreen","matchMedia","fromProperties","getFromProperties","toProperties","getToProperties","add","gsapAnimation","fromTo","set","scrollTrigger","debugMode","hasAttributes","hasAttribute","parentElement","document","querySelector","dataset","onscrollTrigger","console","error","onscrollScreen","animateFrom","getAnimateFrom","offset","getOffsetAndDistance","_extends","bottom","top","x","getDirection","y","animateTo","getAnimateTo","stickyProperties","getStickyProperties","getX","getY","ease","start","getStart","end","getEnd","invalidateOnRefresh","pin","pinSpacing","scrub","getScrub","markers","attrs","every","attr","JSON","parse","onscrollFrom","onscrollTo","getOffset","parseInt","onscrollOffset","onscrollDirection","getDistanceOrSpeed","distance","triggerHeight","offsetHeight","offsetValue","distanceValue","split","trim","endsWith","parseFloat","viewportHeight","window","innerHeight","scrollSpeed","onscrollSpeed","additionalDistance","includes","speed","percentage","map","triggerElement","autoDistance","Math","abs","scrollDistance","onscrollDelay","stickyOffset","onscrollStart","clientHeight","onscrollEnd","group","log","triggerStart","triggerEnd","auto","offsetBefore","offsetAfter","delay","ScrollTrigger","maxScroll","direction","reverse","sticky","groupEnd","refresh","restart","stop","getAll","kill","target","animationData","get","delete","clear","update","destroy"],"mappings":"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"}