{"version":3,"file":"OnscrollDetection.modern.mjs","sources":["../src/index.js"],"sourcesContent":["export default class OnscrollDetection {\n\tconstructor(options = {}) {\n\t\t// Initialise class properties with default values or provided options\n\t\tthis.elements = options.elements || '[data-onscroll]'\n\t\tthis.screen = options.screen || '(min-width: 1025px)'\n\t\tthis.triggers = new Map()\n\t\tthis.debug = options.debug || false\n\n\t\t// Set class names to defaults or provided options\n\t\tthis.scrollingClass = options.scrollingClass || 'is-scrolling'\n\t\tthis.scrolledClass = options.scrolledClass || 'has-scrolled'\n\t\tthis.stickyClass = options.stickyClass || 'is-sticky'\n\t\tthis.stuckClass = options.stuckClass || 'has-stuck'\n\n\t\t// Initialise event handlers\n\t\tthis.eventHandlers = {}\n\n\t\t// Set autoStart to true by default, or use provided value\n\t\tthis.autoStart = options.autoStart !== undefined ? options.autoStart : true\n\n\t\t// Initialise the class\n\t\tif (this.autoStart) {\n\t\t\tthis.init()\n\t\t}\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\t// Convert elements to an array and loop through each\n\t\tgsap.utils.toArray(this.elements).forEach((element, index) => {\n\t\t\t// Get the trigger element\n\t\t\tconst trigger = this.getTrigger(element)\n\n\t\t\t// Get the screen media query\n\t\t\tconst screen = this.getScreen(element)\n\n\t\t\t// Create a matchMedia instance\n\t\t\tconst matchMedia = gsap.matchMedia()\n\n\t\t\t// Get the animation properties for 'from' state\n\t\t\tconst fromProperties = this.getFromProperties(element, index)\n\n\t\t\tfromProperties.startAt = { backgroundColor: 'red' }\n\t\t\tfromProperties.immediateRender = true\n\n\t\t\t// Get the animation properties for 'to' state\n\t\t\tconst toProperties = this.getToProperties(element, index, trigger)\n\n\t\t\t// Add the animation to the matchMedia instance and store the ScrollTrigger instance\n\t\t\tconst animation = matchMedia.add(screen, () => {\n\t\t\t\tconst gsapAnimation = gsap.fromTo(element, fromProperties, toProperties)\n\n\t\t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t\t\t\t\telement,\n\t\t\t\t\tfromProperties,\n\t\t\t\t\ttoProperties,\n\t\t\t\t\tgsapAnimation,\n\t\t\t\t})\n\t\t\t})\n\n\t\t\t// Enable debug mode for logging\n\t\t\tthis.debugMode(element, index)\n\t\t})\n\t}\n\n\t// Function to load and initialize the class\n\tstart() {\n\t\t// Initialize the class\n\t\tthis.init()\n\t}\n\n\t// Events\n\ton(event, handler) {\n\t\tif (!this.eventHandlers[event]) {\n\t\t\tthis.eventHandlers[event] = []\n\t\t}\n\t\tthis.eventHandlers[event].push(handler)\n\t}\n\n\temit(event, ...args) {\n\t\tif (this.eventHandlers[event]) {\n\t\t\tthis.eventHandlers[event].forEach((handler) => handler(...args))\n\t\t}\n\t}\n\n\t// Get the trigger element for ScrollTrigger\n\tgetTrigger(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-auto']) && !element.hasAttribute('data-onscroll-trigger')) {\n\t\t\t// If data-onscroll-auto is present and data-onscroll-trigger is not, use the parent element as the trigger\n\t\t\treturn element.parentElement\n\t\t} else if (element.hasAttribute('data-onscroll-trigger')) {\n\t\t\t// If data-onscroll-trigger is present, try to find the DOM element specified by the attribute\n\t\t\tlet triggerElement = document.querySelector(element.dataset.onscrollTrigger)\n\t\t\tif (triggerElement) {\n\t\t\t\treturn triggerElement\n\t\t\t} else {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`Element specified by data-onscroll-trigger not found: ${element.dataset.onscrollTrigger}`\n\t\t\t\t)\n\t\t\t\treturn element\n\t\t\t}\n\t\t} else {\n\t\t\t// Otherwise, use the element itself as the trigger\n\t\t\treturn element\n\t\t}\n\t}\n\n\t// Get the screen media query\n\tgetScreen(element) {\n\t\treturn element.hasAttribute('data-onscroll-screen') ? element.dataset.onscrollScreen : this.screen\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetFromProperties(element, index) {\n\t\tconst animateFrom = this.getAnimateFrom(element)\n\t\tconst { offset } = this.getOffsetAndDistance(element)\n\n\t\treturn {\n\t\t\t...animateFrom,\n\t\t\tbottom: this.hasAttributes(element, ['data-onscroll-auto', 'data-onscroll-reverse']) ? 'auto' : null,\n\t\t\ttop:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-auto']) &&\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-reverse'])\n\t\t\t\t\t? 'auto'\n\t\t\t\t\t: null,\n\t\t\tx:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t\ty:\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t}\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetToProperties(element, index, trigger) {\n\t\tconst animateTo = this.getAnimateTo(element)\n\t\tconst stickyProperties = this.getStickyProperties(element)\n\t\tconst isSticky = this.hasAttributes(element, ['data-onscroll-sticky'])\n\t\tconst customEventName = element.getAttribute('data-onscroll-call')\n\t\tconst progressEventName = element.getAttribute('data-onscroll-progress')\n\n\t\t// Helper function to dispatch the custom event\n\t\tconst dispatchCustomEvent = (when, direction) => {\n\t\t\tif (customEventName) {\n\t\t\t\twindow.dispatchEvent(\n\t\t\t\t\tnew CustomEvent(customEventName, {\n\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\ttarget: element,\n\t\t\t\t\t\t\tdirection: direction === 1 ? 'down' : 'up',\n\t\t\t\t\t\t\twhen,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\t// Helper function to dispatch progress event\n\t\tconst dispatchProgressEvent = (progress, direction) => {\n\t\t\tif (progressEventName) {\n\t\t\t\twindow.dispatchEvent(\n\t\t\t\t\tnew CustomEvent(progressEventName, {\n\t\t\t\t\t\tdetail: {\n\t\t\t\t\t\t\telement: element,\n\t\t\t\t\t\t\tprogress: progress,\n\t\t\t\t\t\t\tdirection: direction === 1 ? 'down' : 'up',\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t...animateTo,\n\t\t\tx: this.getX(element),\n\t\t\ty: this.getY(element),\n\t\t\tease: 'none',\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: isSticky ? element : trigger,\n\t\t\t\tstart: this.getStart(element),\n\t\t\t\tend: this.getEnd(element),\n\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\tpin: stickyProperties.pin,\n\t\t\t\tpinSpacing: stickyProperties.pinSpacing,\n\t\t\t\tscrub: this.getScrub(element),\n\t\t\t\tmarkers: this.hasAttributes(element, ['data-onscroll-debug']),\n\t\t\t\tonUpdate: (self) => {\n\t\t\t\t\tlet progress = self.progress.toFixed(2)\n\t\t\t\t\telement.style.setProperty('--onscrollProgress', progress)\n\n\t\t\t\t\tif (progressEventName) {\n\t\t\t\t\t\tdispatchProgressEvent(progress, self.direction)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonToggle: (self) => {\n\t\t\t\t\tif (!self.isActive) {\n\t\t\t\t\t\telement.style.setProperty('--onscrollProgress', 0)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonEnter: ({ direction }) => {\n\t\t\t\t\telement.classList.add(this.scrollingClass, this.scrolledClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.add(this.stickyClass, this.stuckClass)\n\t\t\t\t\t}\n\t\t\t\t\tdispatchCustomEvent('onEnter', direction)\n\t\t\t\t\tthis.emit('onEnter', element)\n\t\t\t\t},\n\t\t\t\tonLeave: ({ direction }) => {\n\t\t\t\t\telement.classList.remove(this.scrollingClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.remove(this.stickyClass)\n\t\t\t\t\t}\n\t\t\t\t\tdispatchCustomEvent('onLeave', direction)\n\t\t\t\t\tthis.emit('onLeave', element)\n\t\t\t\t},\n\t\t\t\tonEnterBack: ({ direction }) => {\n\t\t\t\t\telement.classList.add(this.scrollingClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.add(this.stickyClass)\n\t\t\t\t\t}\n\t\t\t\t\tdispatchCustomEvent('onEnterBack', direction)\n\t\t\t\t\tthis.emit('onEnterBack', element)\n\t\t\t\t},\n\t\t\t\tonLeaveBack: ({ direction }) => {\n\t\t\t\t\telement.classList.remove(this.scrollingClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.remove(this.stickyClass)\n\t\t\t\t\t}\n\t\t\t\t\tdispatchCustomEvent('onLeaveBack', direction)\n\t\t\t\t\tthis.emit('onLeaveBack', element)\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t}\n\n\t// Get the sticky properties for ScrollTrigger animation\n\tgetStickyProperties(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn { pin: true, pinSpacing: false }\n\t\t} else {\n\t\t\treturn { pin: false, pinSpacing: true }\n\t\t}\n\t}\n\n\t// Check if an element has all the specified attributes\n\thasAttributes(element, attrs) {\n\t\treturn attrs.every((attr) => element.hasAttribute(attr))\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetAnimateFrom(element) {\n\t\treturn element.hasAttribute('data-onscroll-from') ? JSON.parse(element.dataset.onscrollFrom) : []\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetAnimateTo(element) {\n\t\treturn element.hasAttribute('data-onscroll-to') ? JSON.parse(element.dataset.onscrollTo) : []\n\t}\n\n\t// Get the offset value\n\tgetOffset(element) {\n\t\treturn element.hasAttribute('data-onscroll-offset') ? parseInt(element.dataset.onscrollOffset) : null\n\t}\n\n\t// Get the scroll direction\n\tgetDirection(element) {\n\t\treturn element.dataset.onscrollDirection ? element.dataset.onscrollDirection : 'y'\n\t}\n\n\t// Get the 'x' value for ScrollTrigger animation\n\tgetX(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn null\n\t\t}\n\t\tif (\n\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the 'y' value for ScrollTrigger animation\n\tgetY(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn null\n\t\t}\n\t\tif (\n\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the offset and distance values\n\tgetOffsetAndDistance(element) {\n\t\t// Check if the element has the data-onscroll-sticky attribute\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn { offset: null, distance: null }\n\t\t}\n\n\t\tlet offset = null\n\t\tlet distance = null\n\t\tconst triggerElement = this.getTrigger(element)\n\t\tconst triggerHeight = triggerElement.offsetHeight\n\n\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\n\t\t\t// If the offset value ends with a '%', calculate it as a percentage of the trigger height\n\t\t\tif (offsetValue.trim().endsWith('%')) {\n\t\t\t\tconst offsetPercentage = parseFloat(offsetValue) / 100\n\t\t\t\toffset = offsetPercentage * triggerHeight\n\t\t\t} else {\n\t\t\t\toffset = parseFloat(offsetValue)\n\t\t\t}\n\n\t\t\t// If the distance value ends with a '%', calculate it as a percentage of the trigger height\n\t\t\tif (distanceValue.trim().endsWith('%')) {\n\t\t\t\tconst distancePercentage = parseFloat(distanceValue) / 100\n\t\t\t\tdistance = distancePercentage * triggerHeight\n\t\t\t} else {\n\t\t\t\tdistance = parseFloat(distanceValue)\n\t\t\t}\n\t\t}\n\n\t\treturn { offset, distance }\n\t}\n\n\t// Get the distance or speed value for ScrollTrigger animation\n\tgetDistanceOrSpeed(element) {\n\t\tconst { distance } = this.getOffsetAndDistance(element)\n\t\tconst viewportHeight = window.innerHeight\n\t\tlet scrollSpeed = element.dataset.onscrollSpeed\n\t\tlet additionalDistance = 0\n\n\t\t// Check if there are two values\n\t\tif (scrollSpeed && scrollSpeed.includes(',')) {\n\t\t\tconst [speed, percentage] = scrollSpeed.split(',').map(parseFloat)\n\n\t\t\t// Update the scrollSpeed and calculate the additional distance\n\t\t\tscrollSpeed = speed\n\t\t\tadditionalDistance = (percentage / 100) * viewportHeight\n\n\t\t\t// If scrollSpeed is negative, subtract the additional distance\n\t\t\tif (scrollSpeed < 0) {\n\t\t\t\tadditionalDistance *= -1\n\t\t\t}\n\t\t} else {\n\t\t\tscrollSpeed = parseFloat(scrollSpeed || '0')\n\t\t}\n\n\t\tif (this.hasAttributes(element, ['data-onscroll-auto'])) {\n\t\t\tconst triggerElement = this.getTrigger(element)\n\t\t\tconst autoDistance = Math.abs(triggerElement.offsetHeight - element.offsetHeight)\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -autoDistance : autoDistance\n\t\t} else if (this.hasAttributes(element, ['data-onscroll-speed'])) {\n\t\t\tconst elementHeight = element.offsetHeight\n\t\t\tconst scrollDistance = scrollSpeed * elementHeight + additionalDistance\n\t\t\treturn scrollDistance\n\t\t} else if (distance !== null) {\n\t\t\treturn distance\n\t\t}\n\t}\n\n\t// Get the delay value which controls the scrub setting\n\tgetScrub(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-delay'])) {\n\t\t\treturn parseInt(element.dataset.onscrollDelay)\n\t\t} else {\n\t\t\treturn true // Default scrub value if no 'data-onscroll-delay' attribute is present\n\t\t}\n\t}\n\n\t// Get the start value for ScrollTrigger animation\n\tgetStart(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\tlet stickyOffset = 0\n\n\t\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\t\tstickyOffset = parseFloat(offsetValue)\n\t\t\t}\n\n\t\t\treturn (element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top top') + '+=' + stickyOffset\n\t\t} else if (\n\t\t\tthis.hasAttributes(element, ['data-onscroll-preset', 'data-onscroll-offset']) &&\n\t\t\tthis.getDirection(element) !== 'x' &&\n\t\t\t!this.hasAttributes(element, ['data-onscroll-start', 'data-onscroll-sticky'])\n\t\t) {\n\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\tlet positionElement = parseFloat(offsetValue) < 0 ? 'top+=' + offsetValue : 'top+=0'\n\t\t\tlet positionMarker = 'bottom'\n\n\t\t\treturn positionElement + ' ' + positionMarker\n\t\t} else {\n\t\t\treturn element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top bottom'\n\t\t}\n\t}\n\n\t// Get the end value for ScrollTrigger animation\n\tgetEnd(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\tconst trigger = this.getTrigger(element)\n\t\t\tlet stickyOffset = 0\n\n\t\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\t\tstickyOffset = parseFloat(distanceValue)\n\t\t\t}\n\n\t\t\tconst stickyDistance = trigger.clientHeight - element.clientHeight - stickyOffset\n\n\t\t\treturn element.dataset.onscrollEnd ? element.dataset.onscrollEnd : '+=' + stickyDistance\n\t\t} else if (this.hasAttributes(element, ['data-onscroll-speed']) && !element.hasAttribute('data-onscroll-end')) {\n\t\t\tconst scrollDistance = this.getDistanceOrSpeed(element)\n\t\t\tconst { distance } = this.getOffsetAndDistance(element)\n\n\t\t\treturn `bottom${scrollDistance >= 0 ? '+=' : '-='}${Math.abs(scrollDistance)} top`\n\t\t} else if (\n\t\t\tthis.hasAttributes(element, ['data-onscroll-preset', 'data-onscroll-offset']) &&\n\t\t\tthis.getDirection(element) !== 'x' &&\n\t\t\t!this.hasAttributes(element, ['data-onscroll-end', 'data-onscroll-sticky'])\n\t\t) {\n\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\tlet positionElement = 'bottom+=' + distanceValue\n\t\t\tlet positionMarker = 'top'\n\n\t\t\treturn positionElement + ' ' + positionMarker\n\t\t} else {\n\t\t\treturn element.dataset.onscrollEnd ? element.dataset.onscrollEnd : 'bottom top'\n\t\t}\n\t}\n\n\t// Enable debug mode for logging\n\tdebugMode(element, index) {\n\t\tif (!this.debug && !this.hasAttributes(element, ['data-onscroll-debug'])) return\n\n\t\tconst { offset, distance } = this.getOffsetAndDistance(element)\n\t\tlet speedMultiplier\n\t\tlet speedViewportPercentage\n\n\t\tif (this.hasAttributes(element, ['data-onscroll-speed'])) {\n\t\t\t;[speedMultiplier, speedViewportPercentage] = element.dataset.onscrollSpeed.split(',')\n\t\t}\n\n\t\tconst attrs = element.dataset\n\t\tconst hasSpeed = this.hasAttributes(element, ['data-onscroll-speed'])\n\t\tconst hasPreset = this.hasAttributes(element, ['data-onscroll-preset'])\n\t\tconst hasSticky = this.hasAttributes(element, ['data-onscroll-sticky'])\n\t\tconst hasReverse = this.hasAttributes(element, ['data-onscroll-reverse'])\n\n\t\tconsole.group(`OnscrollDetection() debug instance (#${index + 1})`)\n\t\tconsole.log({\n\t\t\telement: element,\n\t\t\ttrigger: this.getTrigger(element),\n\t\t\ttriggerStart: this.getStart(element),\n\t\t\ttriggerEnd: this.getEnd(element),\n\t\t\tauto: this.hasAttributes(element, ['data-onscroll-auto']),\n\t\t\toffsetBefore: offset,\n\t\t\toffsetAfter: this.getDistanceOrSpeed(element),\n\t\t\tdelay: this.getScrub(element),\n\t\t\tscreen: this.getScreen(element),\n\t\t\tspeed: hasSpeed\n\t\t\t\t? `${parseFloat(\n\t\t\t\t\t\tspeedMultiplier * element.clientHeight + (speedViewportPercentage / 100) * window.innerHeight\n\t\t\t\t  )} (${parseFloat(speedMultiplier)}x element height + ${parseFloat(\n\t\t\t\t\t\tspeedViewportPercentage\n\t\t\t\t  )}% of the viewport height)`\n\t\t\t\t: null,\n\t\t\tdirection: this.hasAttributes(element, ['data-onscroll-direction']) ? attrs.onscrollDirection : 'y',\n\t\t\tpreset: hasPreset,\n\t\t\treverse: hasReverse,\n\t\t\tsticky: hasSticky,\n\t\t\tanimateFrom: this.getAnimateFrom(element),\n\t\t\tanimateTo: this.getAnimateTo(element),\n\t\t\tcustomEvent: this.hasAttributes(element, ['data-onscroll-call']) ? attrs.onscrollCall : null,\n\t\t})\n\n\t\tconst warnings = [\n\t\t\t{\n\t\t\t\tcondition: this.hasAttributes(element, ['data-onscroll-offset']) && hasSpeed,\n\t\t\t\tmessage: '`offset` and `speed` should not be used together',\n\t\t\t},\n\t\t\t{\n\t\t\t\tcondition:\n\t\t\t\t\thasPreset &&\n\t\t\t\t\t(this.hasAttributes(element, ['data-onscroll-start']) ||\n\t\t\t\t\t\tthis.hasAttributes(element, ['data-onscroll-end'])),\n\t\t\t\tmessage: '`preset` should not be used in conjunction with `start` or `end` settings',\n\t\t\t},\n\t\t\t{ condition: hasSticky && hasSpeed, message: '`sticky` should not be used in conjunction with `speed`' },\n\t\t\t{\n\t\t\t\tcondition:\n\t\t\t\t\thasSticky &&\n\t\t\t\t\tthis.hasAttributes(element, ['data-onscroll-offset']) &&\n\t\t\t\t\tthis.hasAttributes(element, ['data-onscroll-end']),\n\t\t\t\tmessage: 'Your bottom `offset` will be ignored due to custom `end` on the `sticky` element',\n\t\t\t},\n\t\t\t{\n\t\t\t\tcondition:\n\t\t\t\t\thasReverse &&\n\t\t\t\t\t(!this.hasAttributes(element, ['data-onscroll-auto']) ||\n\t\t\t\t\t\tthis.hasAttributes(element, ['data-onscroll-offset']) ||\n\t\t\t\t\t\thasSticky ||\n\t\t\t\t\t\thasSpeed),\n\t\t\t\tmessage:\n\t\t\t\t\t'`reverse` is not compatible with `offset`, `speed` or `sticky` and should only be used in conjunction with `auto`',\n\t\t\t},\n\t\t\t{ condition: hasSpeed && hasPreset, message: '`preset` has no effect in conjunction with `speed` setting' },\n\t\t\t{\n\t\t\t\tcondition: this.getDirection(element) === 'x' && hasPreset,\n\t\t\t\tmessage: '`preset` has no effect in conjunction with `x` direction',\n\t\t\t},\n\t\t]\n\n\t\twarnings.forEach((warning) => warning.condition && console.warn(warning.message))\n\t\tconsole.groupEnd()\n\t}\n\n\t// Fetch a trigger\n\tfetch(elementOrIndex) {\n\t\tif (typeof elementOrIndex === 'number') {\n\t\t\t// Treat argument as an index\n\t\t\tconst keys = Array.from(this.triggers.keys())\n\t\t\treturn keys[elementOrIndex]\n\t\t} else {\n\t\t\t// Assume argument is a DOM element\n\t\t\tlet trigger = null\n\t\t\tthis.triggers.forEach((value, key) => {\n\t\t\t\tif (value.element === elementOrIndex) {\n\t\t\t\t\ttrigger = key\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn trigger\n\t\t}\n\t}\n\n\t// Refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\n\t\t// Emit event after refresh is done\n\t\tthis.emit('refresh')\n\t}\n\n\t// Restart the animations and reinitialize the ScrollTrigger instances\n\trestart() {\n\t\t// Stop the current animations and remove ScrollTriggers\n\t\tthis.stop()\n\n\t\t// Kill all existing ScrollTrigger instances\n\t\tScrollTrigger.getAll().forEach((trigger) => trigger.kill())\n\n\t\t// Refresh ScrollTrigger\n\t\tScrollTrigger.refresh()\n\n\t\t// Reapply animations and initialize ScrollTrigger\n\t\tthis.init()\n\n\t\t// Emit event after restart is done\n\t\tthis.emit('restart')\n\t}\n\n\t// Stop animations and ScrollTriggers\n\tstop(target = null) {\n\t\tif (target) {\n\t\t\t// Stop animation and remove the ScrollTrigger for a specific target\n\t\t\tconst animationData = this.triggers.get(target)\n\t\t\tif (animationData) {\n\t\t\t\tanimationData.gsapAnimation.kill()\n\t\t\t\tthis.triggers.delete(target)\n\t\t\t}\n\t\t} else {\n\t\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\t\tthis.triggers.forEach(({ gsapAnimation }) => {\n\t\t\t\tgsapAnimation.kill()\n\t\t\t})\n\t\t\tthis.triggers.clear()\n\t\t}\n\n\t\t// Emit event after stop is done\n\t\tthis.emit('stop', target)\n\t}\n\n\t// Update animation for a specific target with new fromProperties and toProperties\n\tupdate(target, fromProperties, toProperties) {\n\t\tconst animationData = this.triggers.get(target)\n\n\t\tif (animationData) {\n\t\t\t// Stop the existing animation\n\t\t\tanimationData.gsapAnimation.kill()\n\n\t\t\t// Reinitialize the animation with updated properties\n\t\t\tconst gsapAnimation = gsap.fromTo(animationData.element, fromProperties, toProperties)\n\n\t\t\t// Create new ScrollTrigger for the updated animation\n\t\t\tconst trigger = ScrollTrigger.create({\n\t\t\t\tanimation: gsapAnimation,\n\t\t\t\ttrigger: this.getTrigger(animationData.element),\n\t\t\t\tstart: this.getStart(animationData.element),\n\t\t\t\tend: this.getEnd(animationData.element),\n\t\t\t\tscrub: this.getScrub(animationData.element),\n\t\t\t})\n\n\t\t\t// Save the updated animation data\n\t\t\tthis.triggers.set(target, {\n\t\t\t\t...animationData,\n\t\t\t\tfromProperties,\n\t\t\t\ttoProperties,\n\t\t\t\tgsapAnimation,\n\t\t\t\ttrigger,\n\t\t\t})\n\t\t}\n\t}\n\n\t// Destroy the OnscrollDetection instance\n\tdestroy() {\n\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\tthis.stop()\n\t\tthis.triggers = null\n\t}\n}\n"],"names":["OnscrollDetection","constructor","options","this","elements","screen","triggers","Map","debug","scrollingClass","scrolledClass","stickyClass","stuckClass","eventHandlers","autoStart","undefined","init","gsap","utils","toArray","forEach","element","index","trigger","getTrigger","getScreen","matchMedia","fromProperties","getFromProperties","startAt","backgroundColor","immediateRender","toProperties","getToProperties","add","gsapAnimation","fromTo","set","scrollTrigger","debugMode","start","on","event","handler","push","emit","args","hasAttributes","hasAttribute","parentElement","document","querySelector","dataset","onscrollTrigger","console","error","onscrollScreen","animateFrom","getAnimateFrom","offset","getOffsetAndDistance","_extends","bottom","top","x","getDirection","y","animateTo","getAnimateTo","stickyProperties","getStickyProperties","isSticky","customEventName","getAttribute","progressEventName","dispatchCustomEvent","when","direction","window","dispatchEvent","CustomEvent","detail","target","getX","getY","ease","getStart","end","getEnd","invalidateOnRefresh","pin","pinSpacing","scrub","getScrub","markers","onUpdate","self","progress","toFixed","style","setProperty","dispatchProgressEvent","onToggle","isActive","onEnter","classList","onLeave","remove","onEnterBack","onLeaveBack","attrs","every","attr","JSON","parse","onscrollFrom","onscrollTo","getOffset","parseInt","onscrollOffset","onscrollDirection","getDistanceOrSpeed","distance","triggerHeight","offsetHeight","offsetValue","distanceValue","split","trim","endsWith","parseFloat","viewportHeight","innerHeight","scrollSpeed","onscrollSpeed","additionalDistance","includes","speed","percentage","map","triggerElement","autoDistance","Math","abs","onscrollDelay","stickyOffset","onscrollStart","positionElement","onscrollEnd","clientHeight","scrollDistance","speedMultiplier","speedViewportPercentage","hasSpeed","hasPreset","hasSticky","hasReverse","group","log","triggerStart","triggerEnd","auto","offsetBefore","offsetAfter","delay","preset","reverse","sticky","customEvent","onscrollCall","condition","message","warning","warn","groupEnd","fetch","elementOrIndex","Array","from","keys","value","key","refresh","ScrollTrigger","restart","stop","getAll","kill","animationData","get","delete","clear","update","create","animation","destroy"],"mappings":"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"}