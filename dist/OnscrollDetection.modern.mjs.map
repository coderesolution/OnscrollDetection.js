{"version":3,"file":"OnscrollDetection.modern.mjs","sources":["../src/index.js"],"sourcesContent":["export default class OnscrollDetection {\n\tconstructor(options = {}) {\n\t\t// Initialise class properties with default values or provided options\n\t\tthis.elements = options.elements || '[data-onscroll]'\n\t\tthis.screen = options.screen || '(min-width: 1025px)'\n\t\tthis.triggers = new Map()\n\n\t\t// Set class names to defaults or provided options\n\t\tthis.classDefaults = {\n\t\t\tscrollingClass: 'is-scrolling',\n\t\t\tscrolledClass: 'has-scrolled',\n\t\t\tstickyClass: 'is-sticky',\n\t\t\tstuckClass: 'has-stuck',\n\t\t\t...options.classDefaults,\n\t\t}\n\n\t\t// Initialise the class\n\t\tthis.init()\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\t// Convert elements to an array and loop through each\n\t\tgsap.utils.toArray(this.elements).forEach((element, index) => {\n\t\t\t// Get the trigger element\n\t\t\tconst trigger = this.getTrigger(element)\n\n\t\t\t// Get the screen media query\n\t\t\tconst screen = this.getScreen(element)\n\n\t\t\t// Create a matchMedia instance\n\t\t\tconst matchMedia = gsap.matchMedia()\n\n\t\t\t// Get the animation properties for 'from' state\n\t\t\tconst fromProperties = this.getFromProperties(element, index)\n\n\t\t\t// Get the animation properties for 'to' state\n\t\t\tconst toProperties = this.getToProperties(element, index, trigger)\n\n\t\t\t// Add the animation to the matchMedia instance and store the ScrollTrigger instance\n\t\t\tconst animation = matchMedia.add(screen, () => {\n\t\t\t\tconst gsapAnimation = gsap.fromTo(element, fromProperties, toProperties)\n\n\t\t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t\t\t\t\telement,\n\t\t\t\t\tfromProperties,\n\t\t\t\t\ttoProperties,\n\t\t\t\t\tgsapAnimation,\n\t\t\t\t})\n\t\t\t})\n\n\t\t\t// Enable debug mode for logging\n\t\t\tthis.debugMode(element, index)\n\t\t})\n\t}\n\n\t// Helper methods\n\n\t// Get the trigger element for ScrollTrigger\n\tgetTrigger(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-auto']) && !element.hasAttribute('data-onscroll-trigger')) {\n\t\t\t// If data-onscroll-auto is present and data-onscroll-trigger is not, use the parent element as the trigger\n\t\t\treturn element.parentElement\n\t\t} else if (element.hasAttribute('data-onscroll-trigger')) {\n\t\t\t// If data-onscroll-trigger is present, try to find the DOM element specified by the attribute\n\t\t\tlet triggerElement = document.querySelector(element.dataset.onscrollTrigger)\n\t\t\tif (triggerElement) {\n\t\t\t\treturn triggerElement\n\t\t\t} else {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`Element specified by data-onscroll-trigger not found: ${element.dataset.onscrollTrigger}`\n\t\t\t\t)\n\t\t\t\treturn element\n\t\t\t}\n\t\t} else {\n\t\t\t// Otherwise, use the element itself as the trigger\n\t\t\treturn element\n\t\t}\n\t}\n\n\t// Get the screen media query\n\tgetScreen(element) {\n\t\treturn element.hasAttribute('data-onscroll-screen') ? element.dataset.onscrollScreen : this.screen\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetFromProperties(element, index) {\n\t\tconst animateFrom = this.getAnimateFrom(element)\n\t\tconst { offset } = this.getOffsetAndDistance(element)\n\n\t\treturn {\n\t\t\t...animateFrom,\n\t\t\tbottom: this.hasAttributes(element, ['data-onscroll-auto', 'data-onscroll-reverse']) ? 'auto' : null,\n\t\t\ttop:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-auto']) &&\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-reverse'])\n\t\t\t\t\t? 'auto'\n\t\t\t\t\t: null,\n\t\t\tx:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t\ty:\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t}\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetToProperties(element, index, trigger) {\n\t\tconst animateTo = this.getAnimateTo(element)\n\t\tconst stickyProperties = this.getStickyProperties(element)\n\t\tconst isSticky = this.hasAttributes(element, ['data-onscroll-sticky'])\n\n\t\treturn {\n\t\t\t...animateTo,\n\t\t\tx: this.getX(element),\n\t\t\ty: this.getY(element),\n\t\t\tease: 'none',\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: isSticky ? element : trigger,\n\t\t\t\tstart: this.getStart(element),\n\t\t\t\tend: this.getEnd(element),\n\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\tpin: stickyProperties.pin,\n\t\t\t\tpinSpacing: stickyProperties.pinSpacing,\n\t\t\t\tscrub: this.getScrub(element),\n\t\t\t\tmarkers: this.hasAttributes(element, ['data-onscroll-debug']),\n\t\t\t\tonEnter: () => {\n\t\t\t\t\telement.classList.add(this.classDefaults.scrollingClass, this.classDefaults.scrolledClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.add(this.classDefaults.stickyClass, this.classDefaults.stuckClass)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonLeave: () => {\n\t\t\t\t\telement.classList.remove(this.classDefaults.scrollingClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.remove(this.classDefaults.stickyClass)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonEnterBack: () => {\n\t\t\t\t\telement.classList.add(this.classDefaults.scrollingClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.add(this.classDefaults.stickyClass)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tonLeaveBack: () => {\n\t\t\t\t\telement.classList.remove(this.classDefaults.scrollingClass)\n\t\t\t\t\tif (isSticky) {\n\t\t\t\t\t\telement.classList.remove(this.classDefaults.stickyClass)\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t}\n\n\t// Get the sticky properties for ScrollTrigger animation\n\tgetStickyProperties(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn { pin: true, pinSpacing: false }\n\t\t} else {\n\t\t\treturn { pin: false, pinSpacing: true }\n\t\t}\n\t}\n\n\t// Check if an element has all the specified attributes\n\thasAttributes(element, attrs) {\n\t\treturn attrs.every((attr) => element.hasAttribute(attr))\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetAnimateFrom(element) {\n\t\treturn element.hasAttribute('data-onscroll-from') ? JSON.parse(element.dataset.onscrollFrom) : []\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetAnimateTo(element) {\n\t\treturn element.hasAttribute('data-onscroll-to') ? JSON.parse(element.dataset.onscrollTo) : []\n\t}\n\n\t// Get the offset value\n\tgetOffset(element) {\n\t\treturn element.hasAttribute('data-onscroll-offset') ? parseInt(element.dataset.onscrollOffset) : null\n\t}\n\n\t// Get the scroll direction\n\tgetDirection(element) {\n\t\treturn element.dataset.onscrollDirection\n\t}\n\n\t// Get the 'x' value for ScrollTrigger animation\n\tgetX(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn null\n\t\t}\n\t\tif (\n\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the 'y' value for ScrollTrigger animation\n\tgetY(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn null\n\t\t}\n\t\tif (\n\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the offset and distance values\n\tgetOffsetAndDistance(element) {\n\t\t// Check if the element has the data-onscroll-sticky attribute\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn { offset: null, distance: null }\n\t\t}\n\n\t\tlet offset = null\n\t\tlet distance = null\n\t\tconst triggerElement = this.getTrigger(element)\n\t\tconst triggerHeight = triggerElement.offsetHeight\n\n\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\n\t\t\t// If the offset value ends with a '%', calculate it as a percentage of the trigger height\n\t\t\tif (offsetValue.trim().endsWith('%')) {\n\t\t\t\tconst offsetPercentage = parseFloat(offsetValue) / 100\n\t\t\t\toffset = offsetPercentage * triggerHeight\n\t\t\t} else {\n\t\t\t\toffset = parseFloat(offsetValue)\n\t\t\t}\n\n\t\t\t// If the distance value ends with a '%', calculate it as a percentage of the trigger height\n\t\t\tif (distanceValue.trim().endsWith('%')) {\n\t\t\t\tconst distancePercentage = parseFloat(distanceValue) / 100\n\t\t\t\tdistance = distancePercentage * triggerHeight\n\t\t\t} else {\n\t\t\t\tdistance = parseFloat(distanceValue)\n\t\t\t}\n\t\t}\n\n\t\treturn { offset, distance }\n\t}\n\n\t// Get the distance or speed value for ScrollTrigger animation\n\tgetDistanceOrSpeed(element) {\n\t\tconst { distance } = this.getOffsetAndDistance(element)\n\t\tconst viewportHeight = window.innerHeight\n\t\tlet scrollSpeed = element.dataset.onscrollSpeed\n\t\tlet additionalDistance = 0\n\n\t\t// Check if there are two values\n\t\tif (scrollSpeed && scrollSpeed.includes(',')) {\n\t\t\tconst [speed, percentage] = scrollSpeed.split(',').map(parseFloat)\n\n\t\t\t// Update the scrollSpeed and calculate the additional distance\n\t\t\tscrollSpeed = speed\n\t\t\tadditionalDistance = (percentage / 100) * viewportHeight\n\n\t\t\t// If scrollSpeed is negative, subtract the additional distance\n\t\t\tif (scrollSpeed < 0) {\n\t\t\t\tadditionalDistance *= -1\n\t\t\t}\n\t\t} else {\n\t\t\tscrollSpeed = parseFloat(scrollSpeed || '0')\n\t\t}\n\n\t\tif (this.hasAttributes(element, ['data-onscroll-auto'])) {\n\t\t\tconst triggerElement = this.getTrigger(element)\n\t\t\tconst autoDistance = Math.abs(triggerElement.offsetHeight - element.offsetHeight)\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -autoDistance : autoDistance\n\t\t} else if (this.hasAttributes(element, ['data-onscroll-speed'])) {\n\t\t\tconst elementHeight = element.offsetHeight\n\t\t\tconst scrollDistance = scrollSpeed * elementHeight + additionalDistance\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -scrollDistance : scrollDistance\n\t\t} else if (distance !== null) {\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -distance : distance\n\t\t}\n\t}\n\n\t// Get the delay value which controls the scrub setting\n\tgetScrub(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-delay'])) {\n\t\t\treturn parseInt(element.dataset.onscrollDelay)\n\t\t} else {\n\t\t\treturn true // Default scrub value if no 'data-onscroll-delay' attribute is present\n\t\t}\n\t}\n\n\t// Get the start value for ScrollTrigger animation\n\tgetStart(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\tlet stickyOffset = 0\n\n\t\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\t\tstickyOffset = parseFloat(offsetValue)\n\t\t\t}\n\n\t\t\treturn (element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top top') + '+=' + stickyOffset\n\t\t}\n\t\treturn element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top bottom'\n\t}\n\n\t// Get the end value for ScrollTrigger animation\n\tgetEnd(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\tconst trigger = this.getTrigger(element)\n\t\t\tlet stickyOffset = 0\n\n\t\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\t\tstickyOffset = parseFloat(distanceValue)\n\t\t\t}\n\n\t\t\tconst stickyDistance = trigger.clientHeight - element.clientHeight - stickyOffset\n\n\t\t\treturn '+=' + stickyDistance\n\t\t} else if (this.hasAttributes(element, ['data-onscroll-speed']) && !element.hasAttribute('data-onscroll-end')) {\n\t\t\tconst scrollDistance = this.getDistanceOrSpeed(element)\n\t\t\tconst { distance } = this.getOffsetAndDistance(element)\n\n\t\t\treturn `bottom${scrollDistance >= 0 ? '+=' : '-='}${Math.abs(scrollDistance)} top`\n\t\t} else {\n\t\t\treturn element.dataset.onscrollEnd ? element.dataset.onscrollEnd : 'bottom top'\n\t\t}\n\t}\n\n\t// Enable debug mode for logging\n\tdebugMode(element, index) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-debug'])) {\n\t\t\tconst { offset, distance } = this.getOffsetAndDistance(element)\n\t\t\tlet speedMultiplier\n\t\t\tlet speedViewportPercentage\n\t\t\tif (this.hasAttributes(element, ['data-onscroll-speed'])) {\n\t\t\t\t[speedMultiplier, speedViewportPercentage] = element.dataset.onscrollSpeed.split(',')\n\t\t\t}\n\t\t\tconsole.group(`OnscrollDetection() debug instance (#${index + 1})`)\n\t\t\tconsole.log({\n\t\t\t\telement: element,\n\t\t\t\ttrigger: this.getTrigger(element),\n\t\t\t\ttriggerStart: this.getStart(element),\n\t\t\t\ttriggerEnd: this.getEnd(element),\n\t\t\t\tauto: this.hasAttributes(element, ['data-onscroll-auto']),\n\t\t\t\toffsetBefore: offset,\n\t\t\t\toffsetAfter: this.getDistanceOrSpeed(element),\n\t\t\t\tdelay: this.getScrub(element),\n\t\t\t\tscreen: this.getScreen(element),\n\t\t\t\tspeed: this.hasAttributes(element, ['data-onscroll-speed'])\n\t\t\t\t\t? parseFloat((speedMultiplier * element.clientHeight) + (speedViewportPercentage / 100 * window.innerHeight)) + ' (' + parseFloat(speedMultiplier) + 'x element height + ' + parseFloat(speedViewportPercentage) + '% of the viewport height)'\n\t\t\t\t\t: null,\n\t\t\t\tdirection: this.hasAttributes(element, ['data-onscroll-direction'])\n\t\t\t\t\t? element.dataset.onscrollDirection\n\t\t\t\t\t: 'y',\n\t\t\t\treverse: this.hasAttributes(element, ['data-onscroll-reverse']),\n\t\t\t\tsticky: this.hasAttributes(element, ['data-onscroll-sticky']) ? true : false,\n\t\t\t\tanimateFrom: this.getAnimateFrom(element),\n\t\t\t\tanimateTo: this.getAnimateTo(element),\n\t\t\t})\n\t\t\tconsole.groupEnd()\n\t\t}\n\t}\n\n\t// Refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Restart the animations and reinitialize the ScrollTrigger instances\n\trestart() {\n\t\t// Stop the current animations and remove ScrollTriggers\n\t\tthis.stop()\n\n\t\t// Kill all existing ScrollTrigger instances\n\t\tScrollTrigger.getAll().forEach((trigger) => trigger.kill())\n\n\t\t// Refresh ScrollTrigger\n\t\tScrollTrigger.refresh()\n\n\t\t// Reapply animations and initialize ScrollTrigger\n\t\tthis.init()\n\t}\n\n\t// Stop animations and ScrollTriggers\n\tstop(target = null) {\n\t\tif (target) {\n\t\t\t// Stop animation and remove the ScrollTrigger for a specific target\n\t\t\tconst animationData = this.triggers.get(target)\n\t\t\tif (animationData) {\n\t\t\t\tanimationData.gsapAnimation.kill()\n\t\t\t\tthis.triggers.delete(target)\n\t\t\t}\n\t\t} else {\n\t\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\t\tthis.triggers.forEach(({ gsapAnimation }) => {\n\t\t\t\tgsapAnimation.kill()\n\t\t\t})\n\t\t\tthis.triggers.clear()\n\t\t}\n\t}\n\n\t// Update animation for a specific target with new fromProperties and toProperties\n\tupdate(target, fromProperties, toProperties) {\n\t\tconst animationData = this.triggers.get(target)\n\n\t\tif (animationData) {\n\t\t\t// Stop the existing animation\n\t\t\tanimationData.gsapAnimation.kill()\n\n\t\t\t// Reinitialize the animation with updated properties\n\t\t\tconst gsapAnimation = gsap.fromTo(animationData.element, fromProperties, toProperties)\n\t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t\t\t\t...animationData,\n\t\t\t\tfromProperties,\n\t\t\t\ttoProperties,\n\t\t\t\tgsapAnimation,\n\t\t\t})\n\t\t}\n\t}\n\n\t// Destroy the OnscrollDetection instance\n\tdestroy() {\n\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\tthis.stop()\n\t\tthis.triggers = null\n\t}\n}\n"],"names":["OnscrollDetection","constructor","options","this","elements","screen","triggers","Map","classDefaults","_extends","scrollingClass","scrolledClass","stickyClass","stuckClass","init","gsap","utils","toArray","forEach","element","index","trigger","getTrigger","getScreen","matchMedia","fromProperties","getFromProperties","toProperties","getToProperties","add","gsapAnimation","fromTo","set","scrollTrigger","debugMode","hasAttributes","hasAttribute","parentElement","document","querySelector","dataset","onscrollTrigger","console","error","onscrollScreen","animateFrom","getAnimateFrom","offset","getOffsetAndDistance","bottom","top","x","getDirection","y","animateTo","getAnimateTo","stickyProperties","getStickyProperties","isSticky","getX","getY","ease","start","getStart","end","getEnd","invalidateOnRefresh","pin","pinSpacing","scrub","getScrub","markers","onEnter","classList","onLeave","remove","onEnterBack","onLeaveBack","attrs","every","attr","JSON","parse","onscrollFrom","onscrollTo","getOffset","parseInt","onscrollOffset","onscrollDirection","getDistanceOrSpeed","distance","triggerHeight","offsetHeight","offsetValue","distanceValue","split","trim","endsWith","parseFloat","viewportHeight","window","innerHeight","scrollSpeed","onscrollSpeed","additionalDistance","includes","speed","percentage","map","triggerElement","autoDistance","Math","abs","scrollDistance","onscrollDelay","stickyOffset","onscrollStart","clientHeight","onscrollEnd","speedMultiplier","speedViewportPercentage","group","log","triggerStart","triggerEnd","auto","offsetBefore","offsetAfter","delay","direction","reverse","sticky","groupEnd","refresh","ScrollTrigger","restart","stop","getAll","kill","target","animationData","get","delete","clear","update","destroy"],"mappings":"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"}