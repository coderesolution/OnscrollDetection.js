{"version":3,"file":"OnscrollDetection.mjs","sources":["../src/index.js"],"sourcesContent":["export default class OnscrollDetection {\n\tconstructor(options = {}) {\n\t\t// Initialise class properties with default values or provided options\n\t\tthis.elements = options.elements || '[data-onscroll]'\n\t\tthis.screen = options.screen || '(min-width: 768px)'\n\t\tthis.triggers = new Map()\n\n\t\t// Initialise the class\n\t\tthis.init()\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\t// Convert elements to an array and loop through each\n\t\tgsap.utils.toArray(this.elements).forEach((element, index) => {\n\t\t\t// Get the trigger element\n\t\t\tconst trigger = this.getTrigger(element)\n\n\t\t\t// Get the screen media query\n\t\t\tconst screen = this.getScreen(element)\n\n\t\t\t// Create a matchMedia instance\n\t\t\tconst matchMedia = gsap.matchMedia()\n\n\t\t\t// Get the animation properties for 'from' state\n\t\t\tconst fromProperties = this.getFromProperties(element, index)\n\n\t\t\t// Get the animation properties for 'to' state\n\t\t\tconst toProperties = this.getToProperties(element, index, trigger)\n\n\t\t\t// Add the animation to the matchMedia instance and store the ScrollTrigger instance\n\t\t\tconst animation = matchMedia.add(screen, () => {\n\t\t\t\tconst gsapAnimation = gsap.fromTo(element, fromProperties, toProperties)\n\t\t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t\t\t\t\telement,\n\t\t\t\t\tfromProperties,\n\t\t\t\t\ttoProperties,\n\t\t\t\t\tgsapAnimation,\n\t\t\t\t})\n\t\t\t})\n\n\t\t\t// Enable debug mode for logging\n\t\t\tthis.debugMode(element, index)\n\t\t})\n\t}\n\n\t// Helper methods\n\n\t// Get the trigger element for ScrollTrigger\n\tgetTrigger(element) {\n\t\treturn element.hasAttribute('data-onscroll-auto') ? element.parentElement : element\n\t}\n\n\t// Get the screen media query\n\tgetScreen(element) {\n\t\treturn element.hasAttribute('data-onscroll-screen') ? element.dataset.onscrollScreen : this.screen\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetFromProperties(element, index) {\n\t\tconst animateFrom = this.getAnimateFrom(element)\n\t\tconst offset = this.getOffset(element)\n\n\t\treturn {\n\t\t\t...animateFrom,\n\t\t\tbottom: this.hasAttributes(element, ['data-onscroll-auto', 'data-onscroll-reverse']) ? 'auto' : null,\n\t\t\ttop:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-auto']) &&\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-reverse'])\n\t\t\t\t\t? 'auto'\n\t\t\t\t\t: null,\n\t\t\tx:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t\ty:\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t}\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetToProperties(element, index, trigger) {\n\t\tconst animateTo = this.getAnimateTo(element)\n\n\t\treturn {\n\t\t\t...animateTo,\n\t\t\tx: this.getX(element),\n\t\t\ty: this.getY(element),\n\t\t\tease: 'none',\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: trigger,\n\t\t\t\tstart: this.getStart(element),\n\t\t\t\tend: this.getEnd(element),\n\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\tscrub: this.getScrub(element),\n\t\t\t\tmarkers: this.hasAttributes(element, ['data-onscroll-debug']),\n\t\t\t},\n\t\t}\n\t}\n\n\t// Check if an element has all the specified attributes\n\thasAttributes(element, attrs) {\n\t\treturn attrs.every((attr) => element.hasAttribute(attr))\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetAnimateFrom(element) {\n\t\treturn element.hasAttribute('data-onscroll-from') ? JSON.parse(element.dataset.onscrollFrom) : []\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetAnimateTo(element) {\n\t\treturn element.hasAttribute('data-onscroll-to') ? JSON.parse(element.dataset.onscrollTo) : []\n\t}\n\n\t// Get the offset value\n\tgetOffset(element) {\n\t\treturn element.hasAttribute('data-onscroll-offset') ? parseInt(element.dataset.onscrollOffset) : null\n\t}\n\n\t// Get the scroll direction\n\tgetDirection(element) {\n\t\treturn element.dataset.onscrollDirection\n\t}\n\n\t// Get the 'x' value for ScrollTrigger animation\n\tgetX(element) {\n\t\tif (\n\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the 'y' value for ScrollTrigger animation\n\tgetY(element) {\n\t\tif (\n\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the distance or speed value for ScrollTrigger animation\n\tgetDistanceOrSpeed(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-speed'])) {\n\t\t\treturn (\n\t\t\t\t(1 - parseFloat(element.dataset.onscrollSpeed)) *\n\t\t\t\t(ScrollTrigger.maxScroll(window) - (this.scrollTrigger ? this.scrollTrigger.start : 0))\n\t\t\t)\n\t\t} else {\n\t\t\tlet distance = parseInt(element.dataset.onscrollDistance)\n\t\t\tif (this.hasAttributes(element, ['data-onscroll-auto'])) {\n\t\t\t\tdistance = element.offsetHeight - element.parentElement.offsetHeight\n\t\t\t}\n\t\t\tif (this.hasAttributes(element, ['data-onscroll-reverse'])) {\n\t\t\t\treturn -distance\n\t\t\t}\n\t\t\treturn distance\n\t\t}\n\t}\n\n\t// Get the delay value which controls the scrub setting\n\tgetScrub(element) {\n\t\tif (element.hasAttribute('data-onscroll-delay')) {\n\t\t\tlet delayValue = element.dataset.onscrollDelay;\n\t\t\t// Assuming the delayValue can be either an integer or a boolean\n\t\t\tif (delayValue === 'true') {\n\t\t\t\treturn true;\n\t\t\t} else if (delayValue === 'false') {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t// Assuming the delayValue is an integer.\n\t\t\t\t// Parse it to int and return.\n\t\t\t\treturn parseInt(delayValue);\n\t\t\t}\n\t\t} else {\n\t\t\treturn true;  // Default scrub value if no 'data-onscroll-delay' attribute is present\n\t\t}\n\t}\n\n\t// Get the start value for ScrollTrigger animation\n\tgetStart(element) {\n\t\treturn element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top bottom'\n\t}\n\n\t// Get the end value for ScrollTrigger animation\n\tgetEnd(element) {\n\t\treturn element.dataset.onscrollEnd ? element.dataset.onscrollEnd : 'bottom top'\n\t}\n\n\t// Enable debug mode for logging\n\tdebugMode(element, index) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-debug'])) {\n\t\t\tconsole.group(`OnscrollDetection() debug instance (${index + 1})`)\n\t\t\tconsole.log({\n\t\t\t\telement: element,\n\t\t\t\ttrigger: this.getTrigger(element),\n\t\t\t\ttriggerStart: this.getStart(element),\n\t\t\t\ttriggerEnd: this.getEnd(element),\n\t\t\t\tauto: this.hasAttributes(element, ['data-onscroll-auto']),\n\t\t\t\toffset: this.getOffset(element),\n\t\t\t\tdistance: this.getDistanceOrSpeed(element),\n\t\t\t\tdelay: this.getScrub(element),\n\t\t\t\tscreen: this.getScreen(element),\n\t\t\t\tspeed: this.hasAttributes(element, ['data-onscroll-speed'])\n\t\t\t\t\t? element.dataset.onscrollSpeed +\n\t\t\t\t\t  ' calculated at ' +\n\t\t\t\t\t  (1 - parseFloat(element.dataset.onscrollSpeed)) *\n\t\t\t\t\t\t\t(ScrollTrigger.maxScroll(window) - (this.scrollTrigger ? this.scrollTrigger.start : 0))\n\t\t\t\t\t: null,\n\t\t\t\tdirection: this.hasAttributes(element, ['data-onscroll-direction'])\n\t\t\t\t\t? element.dataset.onscrollDirection\n\t\t\t\t\t: 'y',\n\t\t\t\treverse: this.hasAttributes(element, ['data-onscroll-reverse']),\n\t\t\t\tanimateFrom: this.getAnimateFrom(element),\n\t\t\t\tanimateTo: this.getAnimateTo(element),\n\t\t\t})\n\t\t\tconsole.groupEnd()\n\t\t}\n\t}\n\n\t// Refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Restart the animations and reinitialize the ScrollTrigger instances\n\trestart() {\n\t\t// Stop the current animations and remove ScrollTriggers\n\t\tthis.stop()\n\n\t\t// Kill all existing ScrollTrigger instances\n\t\tScrollTrigger.getAll().forEach((trigger) => trigger.kill())\n\n\t\t// Refresh ScrollTrigger\n\t\tScrollTrigger.refresh()\n\n\t\t// Reapply animations and initialize ScrollTrigger\n\t\tthis.init()\n\t}\n\n\t// Stop animations and ScrollTriggers\n\tstop(target = null) {\n\t\tif (target) {\n\t\t\t// Stop animation and remove the ScrollTrigger for a specific target\n\t\t\tconst animationData = this.triggers.get(target)\n\t\t\tif (animationData) {\n\t\t\t\tanimationData.gsapAnimation.kill()\n\t\t\t\tthis.triggers.delete(target)\n\t\t\t}\n\t\t} else {\n\t\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\t\tthis.triggers.forEach(({ gsapAnimation }) => {\n\t\t\t\tgsapAnimation.kill()\n\t\t\t})\n\t\t\tthis.triggers.clear()\n\t\t}\n\t}\n\n\t// Update animation for a specific target with new fromProperties and toProperties\n\tupdate(target, fromProperties, toProperties) {\n\t\tconst animationData = this.triggers.get(target)\n\n\t\tif (animationData) {\n\t\t\t// Stop the existing animation\n\t\t\tanimationData.gsapAnimation.kill()\n\n\t\t\t// Reinitialize the animation with updated properties\n\t\t\tconst gsapAnimation = gsap.fromTo(animationData.element, fromProperties, toProperties)\n\t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t\t\t\t...animationData,\n\t\t\t\tfromProperties,\n\t\t\t\ttoProperties,\n\t\t\t\tgsapAnimation,\n\t\t\t})\n\t\t}\n\t}\n\n\t// Destroy the OnscrollDetection instance\n\tdestroy() {\n\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\tthis.stop()\n\t\tthis.triggers = null\n\t}\n}"],"names":["OnscrollDetection","options","this","elements","screen","triggers","Map","init","_proto","prototype","_this","gsap","utils","toArray","forEach","element","index","trigger","getTrigger","getScreen","matchMedia","fromProperties","getFromProperties","toProperties","getToProperties","add","gsapAnimation","fromTo","set","scrollTrigger","debugMode","hasAttribute","parentElement","dataset","onscrollScreen","animateFrom","getAnimateFrom","offset","getOffset","_extends","bottom","hasAttributes","top","x","getDirection","y","getAnimateTo","getX","getY","ease","start","getStart","end","getEnd","invalidateOnRefresh","scrub","getScrub","markers","attrs","every","attr","JSON","parse","onscrollFrom","onscrollTo","parseInt","onscrollOffset","onscrollDirection","getDistanceOrSpeed","parseFloat","onscrollSpeed","ScrollTrigger","maxScroll","window","distance","onscrollDistance","offsetHeight","delayValue","onscrollDelay","onscrollStart","onscrollEnd","console","group","log","triggerStart","triggerEnd","auto","delay","speed","direction","reverse","animateTo","groupEnd","refresh","restart","stop","getAll","kill","target","animationData","get","_ref","clear","update","destroy"],"mappings":"oOAAqB,IAAAA,0BACpB,SAAAA,EAAYC,QAAAA,IAAAA,IAAAA,EAAU,IAErBC,KAAKC,SAAWF,EAAQE,UAAY,kBACpCD,KAAKE,OAASH,EAAQG,QAAU,qBAChCF,KAAKG,SAAW,IAAIC,IAGpBJ,KAAKK,MACN,CAAC,IAAAC,EAAAR,EAAAS,iBAAAD,EAGDD,KAAA,WAAOG,IAAAA,OAENC,KAAKC,MAAMC,QAAQX,KAAKC,UAAUW,QAAQ,SAACC,EAASC,GAEnD,IAAMC,EAAUP,EAAKQ,WAAWH,GAG1BX,EAASM,EAAKS,UAAUJ,GAGxBK,EAAaT,KAAKS,aAGlBC,EAAiBX,EAAKY,kBAAkBP,EAASC,GAGjDO,EAAeb,EAAKc,gBAAgBT,EAASC,EAAOC,GAGxCG,EAAWK,IAAIrB,EAAQ,WACxC,IAAMsB,EAAgBf,KAAKgB,OAAOZ,EAASM,EAAgBE,GAC3Db,EAAKL,SAASuB,IAAIF,EAAcG,cAAe,CAC9Cd,QAAAA,EACAM,eAAAA,EACAE,aAAAA,EACAG,cAAAA,GAEF,GAGAhB,EAAKoB,UAAUf,EAASC,EACzB,EACD,EAACR,EAKDU,WAAA,SAAWH,GACV,OAAOA,EAAQgB,aAAa,sBAAwBhB,EAAQiB,cAAgBjB,CAC7E,EAACP,EAGDW,UAAA,SAAUJ,GACT,OAAOA,EAAQgB,aAAa,wBAA0BhB,EAAQkB,QAAQC,eAAiBhC,KAAKE,MAC7F,EAACI,EAGDc,kBAAA,SAAkBP,EAASC,GAC1B,IAAMmB,EAAcjC,KAAKkC,eAAerB,GAClCsB,EAASnC,KAAKoC,UAAUvB,GAE9B,OAAAwB,EAAA,GACIJ,EACHK,CAAAA,OAAQtC,KAAKuC,cAAc1B,EAAS,CAAC,qBAAsB,0BAA4B,OAAS,KAChG2B,IACCxC,KAAKuC,cAAc1B,EAAS,CAAC,yBAC5Bb,KAAKuC,cAAc1B,EAAS,CAAC,0BAC3B,OACA,KACJ4B,GACCzC,KAAKuC,cAAc1B,EAAS,CAAC,6BACG,MAA/Bb,KAAK0C,aAAa7B,IAAmD,OAA/Bb,KAAK0C,aAAa7B,GAEtD,KADAsB,EAEJQ,GACE3C,KAAKuC,cAAc1B,EAAS,CAAC,6BAC7Bb,KAAKuC,cAAc1B,EAAS,CAAC,8BACG,MAA/Bb,KAAK0C,aAAa7B,IAAmD,OAA/Bb,KAAK0C,aAAa7B,IACvDsB,EACA,MAEN,EAAC7B,EAGDgB,gBAAA,SAAgBT,EAASC,EAAOC,GAG/B,OAAAsB,KAFkBrC,KAAK4C,aAAa/B,GAGvB,CACZ4B,EAAGzC,KAAK6C,KAAKhC,GACb8B,EAAG3C,KAAK8C,KAAKjC,GACbkC,KAAM,OACNpB,cAAe,CACdZ,QAASA,EACTiC,MAAOhD,KAAKiD,SAASpC,GACrBqC,IAAKlD,KAAKmD,OAAOtC,GACjBuC,qBAAqB,EACrBC,MAAOrD,KAAKsD,SAASzC,GACrB0C,QAASvD,KAAKuC,cAAc1B,EAAS,CAAC,0BAGzC,EAACP,EAGDiC,cAAA,SAAc1B,EAAS2C,GACtB,OAAOA,EAAMC,MAAM,SAACC,GAAI,OAAK7C,EAAQgB,aAAa6B,EAAK,EACxD,EAACpD,EAGD4B,eAAA,SAAerB,GACd,OAAOA,EAAQgB,aAAa,sBAAwB8B,KAAKC,MAAM/C,EAAQkB,QAAQ8B,cAAgB,EAChG,EAACvD,EAGDsC,aAAA,SAAa/B,GACZ,OAAOA,EAAQgB,aAAa,oBAAsB8B,KAAKC,MAAM/C,EAAQkB,QAAQ+B,YAAc,EAC5F,EAACxD,EAGD8B,UAAA,SAAUvB,GACT,OAAOA,EAAQgB,aAAa,wBAA0BkC,SAASlD,EAAQkB,QAAQiC,gBAAkB,IAClG,EAAC1D,EAGDoC,aAAA,SAAa7B,GACZ,OAAOA,EAAQkB,QAAQkC,iBACxB,EAAC3D,EAGDuC,KAAA,SAAKhC,GACJ,GACCb,KAAKuC,cAAc1B,EAAS,CAAC,8BACG,MAA/Bb,KAAK0C,aAAa7B,IAAmD,OAA/Bb,KAAK0C,aAAa7B,IAEzD,OAAOb,KAAKkE,mBAAmBrD,EAEjC,EAACP,EAGDwC,KAAA,SAAKjC,GACJ,IACEb,KAAKuC,cAAc1B,EAAS,CAAC,6BAC7Bb,KAAKuC,cAAc1B,EAAS,CAAC,8BACG,MAA/Bb,KAAK0C,aAAa7B,IAAmD,OAA/Bb,KAAK0C,aAAa7B,IAE1D,OAAWb,KAACkE,mBAAmBrD,EAEjC,EAACP,EAGD4D,mBAAA,SAAmBrD,GAClB,GAAIb,KAAKuC,cAAc1B,EAAS,CAAC,wBAChC,OACE,EAAIsD,WAAWtD,EAAQkB,QAAQqC,iBAC/BC,cAAcC,UAAUC,SAAWvE,KAAK2B,cAAgB3B,KAAK2B,cAAcqB,MAAQ,IAGrF,IAAIwB,EAAWT,SAASlD,EAAQkB,QAAQ0C,kBAIxC,OAHIzE,KAAKuC,cAAc1B,EAAS,CAAC,yBAChC2D,EAAW3D,EAAQ6D,aAAe7D,EAAQiB,cAAc4C,cAErD1E,KAAKuC,cAAc1B,EAAS,CAAC,2BACxB2D,EAEFA,CAET,EAAClE,EAGDgD,SAAA,SAASzC,GACR,GAAIA,EAAQgB,aAAa,uBAAwB,CAChD,IAAI8C,EAAa9D,EAAQkB,QAAQ6C,cAEjC,MAAmB,SAAfD,GAEsB,UAAfA,GAKHZ,SAASY,EAElB,CACC,QAEF,EAACrE,EAGD2C,SAAA,SAASpC,GACR,OAAOA,EAAQkB,QAAQ8C,cAAgBhE,EAAQkB,QAAQ8C,cAAgB,YACxE,EAACvE,EAGD6C,OAAA,SAAOtC,GACN,OAAOA,EAAQkB,QAAQ+C,YAAcjE,EAAQkB,QAAQ+C,YAAc,YACpE,EAACxE,EAGDsB,UAAA,SAAUf,EAASC,GACdd,KAAKuC,cAAc1B,EAAS,CAAC,0BAChCkE,QAAQC,MAAK,wCAAwClE,EAAQ,QAC7DiE,QAAQE,IAAI,CACXpE,QAASA,EACTE,QAASf,KAAKgB,WAAWH,GACzBqE,aAAclF,KAAKiD,SAASpC,GAC5BsE,WAAYnF,KAAKmD,OAAOtC,GACxBuE,KAAMpF,KAAKuC,cAAc1B,EAAS,CAAC,uBACnCsB,OAAQnC,KAAKoC,UAAUvB,GACvB2D,SAAUxE,KAAKkE,mBAAmBrD,GAClCwE,MAAOrF,KAAKsD,SAASzC,GACrBX,OAAQF,KAAKiB,UAAUJ,GACvByE,MAAOtF,KAAKuC,cAAc1B,EAAS,CAAC,wBACjCA,EAAQkB,QAAQqC,cAChB,mBACC,EAAID,WAAWtD,EAAQkB,QAAQqC,iBAC/BC,cAAcC,UAAUC,SAAWvE,KAAK2B,cAAgB3B,KAAK2B,cAAcqB,MAAQ,IACpF,KACHuC,UAAWvF,KAAKuC,cAAc1B,EAAS,CAAC,4BACrCA,EAAQkB,QAAQkC,kBAChB,IACHuB,QAASxF,KAAKuC,cAAc1B,EAAS,CAAC,0BACtCoB,YAAajC,KAAKkC,eAAerB,GACjC4E,UAAWzF,KAAK4C,aAAa/B,KAE9BkE,QAAQW,WAEV,EAACpF,EAGDqF,QAAA,WACCtB,cAAcsB,SACf,EAACrF,EAGDsF,QAAA,WAEC5F,KAAK6F,OAGLxB,cAAcyB,SAASlF,QAAQ,SAACG,GAAO,OAAKA,EAAQgF,MAAM,GAG1D1B,cAAcsB,UAGd3F,KAAKK,MACN,EAACC,EAGDuF,KAAA,SAAKG,GACJ,QADIA,IAAAA,IAAAA,EAAS,MACTA,EAAQ,CAEX,IAAMC,EAAgBjG,KAAKG,SAAS+F,IAAIF,GACpCC,IACHA,EAAczE,cAAcuE,OAC5B/F,KAAKG,SAAQ,OAAQ6F,GAEvB,MAEChG,KAAKG,SAASS,QAAQ,SAAAuF,GAAgBA,EAAb3E,cACVuE,MACf,GACA/F,KAAKG,SAASiG,OAEhB,EAAC9F,EAGD+F,OAAA,SAAOL,EAAQ7E,EAAgBE,GAC9B,IAAM4E,EAAgBjG,KAAKG,SAAS+F,IAAIF,GAExC,GAAIC,EAAe,CAElBA,EAAczE,cAAcuE,OAG5B,IAAMvE,EAAgBf,KAAKgB,OAAOwE,EAAcpF,QAASM,EAAgBE,GACzErB,KAAKG,SAASuB,IAAIF,EAAcG,cAAaU,KACzC4D,EAAa,CAChB9E,eAAAA,EACAE,aAAAA,EACAG,cAAAA,IAEF,CACD,EAAClB,EAGDgG,QAAA,WAECtG,KAAK6F,OACL7F,KAAKG,SAAW,IACjB,EAACL,CAAA"}