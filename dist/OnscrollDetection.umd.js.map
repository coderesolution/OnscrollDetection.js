{"version":3,"file":"OnscrollDetection.umd.js","sources":["../src/index.js"],"sourcesContent":["export default class OnscrollDetection {\n\tconstructor(options = {}) {\n\t\t// Initialise class properties with default values or provided options\n\t\tthis.elements = options.elements || '[data-onscroll]'\n\t\tthis.screen = options.screen || '(min-width: 1025px)'\n\t\tthis.triggers = new Map()\n\n\t\t// Initialise the class\n\t\tthis.init()\n\t}\n\n\t// Initialisation function\n\tinit() {\n\t\t// Convert elements to an array and loop through each\n\t\tgsap.utils.toArray(this.elements).forEach((element, index) => {\n\t\t\t// Get the trigger element\n\t\t\tconst trigger = this.getTrigger(element)\n\n\t\t\t// Get the screen media query\n\t\t\tconst screen = this.getScreen(element)\n\n\t\t\t// Create a matchMedia instance\n\t\t\tconst matchMedia = gsap.matchMedia()\n\n\t\t\t// Get the animation properties for 'from' state\n\t\t\tconst fromProperties = this.getFromProperties(element, index)\n\n\t\t\t// Get the animation properties for 'to' state\n\t\t\tconst toProperties = this.getToProperties(element, index, trigger)\n\n\t\t\t// Add the animation to the matchMedia instance and store the ScrollTrigger instance\n\t\t\tconst animation = matchMedia.add(screen, () => {\n\t\t\t\tconst gsapAnimation = gsap.fromTo(element, fromProperties, toProperties)\n\n\t\t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t\t\t\t\telement,\n\t\t\t\t\tfromProperties,\n\t\t\t\t\ttoProperties,\n\t\t\t\t\tgsapAnimation,\n\t\t\t\t})\n\t\t\t})\n\n\t\t\t// Enable debug mode for logging\n\t\t\tthis.debugMode(element, index)\n\t\t})\n\t}\n\n\t// Helper methods\n\n\t// Get the trigger element for ScrollTrigger\n\tgetTrigger(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-auto']) && !element.hasAttribute('data-onscroll-trigger')) {\n\t\t\t// If data-onscroll-auto is present and data-onscroll-trigger is not, use the parent element as the trigger\n\t\t\treturn element.parentElement\n\t\t} else if (element.hasAttribute('data-onscroll-trigger')) {\n\t\t\t// If data-onscroll-trigger is present, try to find the DOM element specified by the attribute\n\t\t\tlet triggerElement = document.querySelector(element.dataset.onscrollTrigger)\n\t\t\tif (triggerElement) {\n\t\t\t\treturn triggerElement\n\t\t\t} else {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`Element specified by data-onscroll-trigger not found: ${element.dataset.onscrollTrigger}`\n\t\t\t\t)\n\t\t\t\treturn element\n\t\t\t}\n\t\t} else {\n\t\t\t// Otherwise, use the element itself as the trigger\n\t\t\treturn element\n\t\t}\n\t}\n\n\t// Get the screen media query\n\tgetScreen(element) {\n\t\treturn element.hasAttribute('data-onscroll-screen') ? element.dataset.onscrollScreen : this.screen\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetFromProperties(element, index) {\n\t\tconst animateFrom = this.getAnimateFrom(element)\n\t\tconst { offset } = this.getOffsetAndDistance(element)\n\n\t\treturn {\n\t\t\t...animateFrom,\n\t\t\tbottom: this.hasAttributes(element, ['data-onscroll-auto', 'data-onscroll-reverse']) ? 'auto' : null,\n\t\t\ttop:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-auto']) &&\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-reverse'])\n\t\t\t\t\t? 'auto'\n\t\t\t\t\t: null,\n\t\t\tx:\n\t\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t\ty:\n\t\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t\t\t\t? offset\n\t\t\t\t\t: null,\n\t\t}\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetToProperties(element, index, trigger) {\n\t\tconst animateTo = this.getAnimateTo(element)\n\t\tconst stickyProperties = this.getStickyProperties(element)\n\n\t\treturn {\n\t\t\t...animateTo,\n\t\t\tx: this.getX(element),\n\t\t\ty: this.getY(element),\n\t\t\tease: 'none',\n\t\t\tscrollTrigger: {\n\t\t\t\ttrigger: this.hasAttributes(element, ['data-onscroll-sticky']) ? element : trigger,\n\t\t\t\tstart: this.getStart(element),\n\t\t\t\tend: this.getEnd(element),\n\t\t\t\tinvalidateOnRefresh: true,\n\t\t\t\tpin: stickyProperties.pin,\n\t\t\t\tpinSpacing: stickyProperties.pinSpacing,\n\t\t\t\tscrub: this.getScrub(element),\n\t\t\t\tmarkers: this.hasAttributes(element, ['data-onscroll-debug']),\n\t\t\t},\n\t\t}\n\t}\n\n\t// Get the sticky properties for ScrollTrigger animation\n\tgetStickyProperties(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn { pin: true, pinSpacing: false }\n\t\t} else {\n\t\t\treturn { pin: false, pinSpacing: true }\n\t\t}\n\t}\n\n\t// Check if an element has all the specified attributes\n\thasAttributes(element, attrs) {\n\t\treturn attrs.every((attr) => element.hasAttribute(attr))\n\t}\n\n\t// Get the animation properties for 'from' state\n\tgetAnimateFrom(element) {\n\t\treturn element.hasAttribute('data-onscroll-from') ? JSON.parse(element.dataset.onscrollFrom) : []\n\t}\n\n\t// Get the animation properties for 'to' state\n\tgetAnimateTo(element) {\n\t\treturn element.hasAttribute('data-onscroll-to') ? JSON.parse(element.dataset.onscrollTo) : []\n\t}\n\n\t// Get the offset value\n\tgetOffset(element) {\n\t\treturn element.hasAttribute('data-onscroll-offset') ? parseInt(element.dataset.onscrollOffset) : null\n\t}\n\n\t// Get the scroll direction\n\tgetDirection(element) {\n\t\treturn element.dataset.onscrollDirection\n\t}\n\n\t// Get the 'x' value for ScrollTrigger animation\n\tgetX(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn null\n\t\t}\n\t\tif (\n\t\t\tthis.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t(this.getDirection(element) === 'x' || this.getDirection(element) === 'xy')\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the 'y' value for ScrollTrigger animation\n\tgetY(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn null\n\t\t}\n\t\tif (\n\t\t\t!this.hasAttributes(element, ['data-onscroll-direction']) ||\n\t\t\t(this.hasAttributes(element, ['data-onscroll-direction']) &&\n\t\t\t\t(this.getDirection(element) === 'y' || this.getDirection(element) === 'xy'))\n\t\t) {\n\t\t\treturn this.getDistanceOrSpeed(element)\n\t\t}\n\t}\n\n\t// Get the offset and distance values\n\tgetOffsetAndDistance(element) {\n\t\t// Check if the element has the data-onscroll-sticky attribute\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\treturn { offset: null, distance: null }\n\t\t}\n\n\t\tlet offset = null\n\t\tlet distance = null\n\t\tconst triggerElement = this.getTrigger(element)\n\t\tconst triggerHeight = triggerElement.offsetHeight\n\n\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\n\t\t\t// If the offset value ends with a '%', calculate it as a percentage of the trigger height\n\t\t\tif (offsetValue.trim().endsWith('%')) {\n\t\t\t\tconst offsetPercentage = parseFloat(offsetValue) / 100\n\t\t\t\toffset = offsetPercentage * triggerHeight\n\t\t\t} else {\n\t\t\t\toffset = parseFloat(offsetValue)\n\t\t\t}\n\n\t\t\t// If the distance value ends with a '%', calculate it as a percentage of the trigger height\n\t\t\tif (distanceValue.trim().endsWith('%')) {\n\t\t\t\tconst distancePercentage = parseFloat(distanceValue) / 100\n\t\t\t\tdistance = distancePercentage * triggerHeight\n\t\t\t} else {\n\t\t\t\tdistance = parseFloat(distanceValue)\n\t\t\t}\n\t\t}\n\n\t\treturn { offset, distance }\n\t}\n\n\t// Get the distance or speed value for ScrollTrigger animation\n\tgetDistanceOrSpeed(element) {\n\t\tconst { distance } = this.getOffsetAndDistance(element)\n\t\tconst viewportHeight = window.innerHeight\n\t\tlet scrollSpeed = element.dataset.onscrollSpeed\n\t\tlet additionalDistance = 0\n\n\t\t// Check if there are two values\n\t\tif (scrollSpeed && scrollSpeed.includes(',')) {\n\t\t\tconst [speed, percentage] = scrollSpeed.split(',').map(parseFloat)\n\n\t\t\t// Update the scrollSpeed and calculate the additional distance\n\t\t\tscrollSpeed = speed\n\t\t\tadditionalDistance = (percentage / 100) * viewportHeight\n\n\t\t\t// If scrollSpeed is negative, subtract the additional distance\n\t\t\tif (scrollSpeed < 0) {\n\t\t\t\tadditionalDistance *= -1\n\t\t\t}\n\t\t} else {\n\t\t\tscrollSpeed = parseFloat(scrollSpeed || '0')\n\t\t}\n\n\t\tif (this.hasAttributes(element, ['data-onscroll-auto'])) {\n\t\t\tconst triggerElement = this.getTrigger(element)\n\t\t\tconst autoDistance = Math.abs(triggerElement.offsetHeight - element.offsetHeight)\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -autoDistance : autoDistance\n\t\t} else if (this.hasAttributes(element, ['data-onscroll-speed'])) {\n\t\t\tconst elementHeight = element.offsetHeight\n\t\t\tconst scrollDistance = scrollSpeed * elementHeight + additionalDistance\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -scrollDistance : scrollDistance\n\t\t} else if (distance !== null) {\n\t\t\treturn this.hasAttributes(element, ['data-onscroll-reverse']) ? -distance : distance\n\t\t}\n\t}\n\n\t// Get the delay value which controls the scrub setting\n\tgetScrub(element) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-delay'])) {\n\t\t\treturn parseInt(element.dataset.onscrollDelay)\n\t\t} else {\n\t\t\treturn true // Default scrub value if no 'data-onscroll-delay' attribute is present\n\t\t}\n\t}\n\n\t// Get the start value for ScrollTrigger animation\n\tgetStart(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\tlet stickyOffset = 0\n\n\t\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\t\tstickyOffset = parseFloat(offsetValue)\n\t\t\t}\n\n\t\t\treturn ( element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top top' ) + '+=' + stickyOffset\n\t\t}\n\t\treturn element.dataset.onscrollStart ? element.dataset.onscrollStart : 'top bottom'\n\t}\n\n\t// Get the end value for ScrollTrigger animation\n\tgetEnd(element) {\n\t\tif (element.hasAttribute('data-onscroll-sticky')) {\n\t\t\tconst trigger = this.getTrigger(element)\n\t\t\tlet stickyOffset = 0\n\n\t\t\tif (element.hasAttribute('data-onscroll-offset')) {\n\t\t\t\tconst [offsetValue, distanceValue] = element.dataset.onscrollOffset.split(',')\n\t\t\t\tstickyOffset = parseFloat(distanceValue)\n\t\t\t}\n\n\t\t\tconst stickyDistance = trigger.clientHeight - element.clientHeight - stickyOffset\n\n\t\t\treturn '+=' + stickyDistance\n\t\t} else if (this.hasAttributes(element, ['data-onscroll-speed']) && !element.hasAttribute('data-onscroll-end')) {\n\t\t\tconst scrollDistance = this.getDistanceOrSpeed(element)\n\t\t\tconst { distance } = this.getOffsetAndDistance(element)\n\n\t\t\treturn `bottom${scrollDistance >= 0 ? '+=' : '-='}${Math.abs(scrollDistance)} top`\n\t\t} else {\n\t\t\treturn element.dataset.onscrollEnd ? element.dataset.onscrollEnd : 'bottom top'\n\t\t}\n\t}\n\n\t// Enable debug mode for logging\n\tdebugMode(element, index) {\n\t\tif (this.hasAttributes(element, ['data-onscroll-debug'])) {\n\t\t\tconst { offset, distance } = this.getOffsetAndDistance(element)\n\t\t\tconsole.group(`OnscrollDetection() debug instance (#${index + 1})`)\n\t\t\tconsole.log({\n\t\t\t\telement: element,\n\t\t\t\ttrigger: this.getTrigger(element),\n\t\t\t\ttriggerStart: this.getStart(element),\n\t\t\t\ttriggerEnd: this.getEnd(element),\n\t\t\t\tauto: this.hasAttributes(element, ['data-onscroll-auto']),\n\t\t\t\toffsetBefore: offset,\n\t\t\t\toffsetAfter: this.getDistanceOrSpeed(element),\n\t\t\t\tdelay: this.getScrub(element),\n\t\t\t\tscreen: this.getScreen(element),\n\t\t\t\tspeed: this.hasAttributes(element, ['data-onscroll-speed'])\n\t\t\t\t\t? element.dataset.onscrollSpeed +\n\t\t\t\t\t  ' calculated at ' +\n\t\t\t\t\t  (1 - parseFloat(element.dataset.onscrollSpeed)) *\n\t\t\t\t\t\t\t(ScrollTrigger.maxScroll(window) - (this.scrollTrigger ? this.scrollTrigger.start : 0))\n\t\t\t\t\t: null,\n\t\t\t\tdirection: this.hasAttributes(element, ['data-onscroll-direction'])\n\t\t\t\t\t? element.dataset.onscrollDirection\n\t\t\t\t\t: 'y',\n\t\t\t\treverse: this.hasAttributes(element, ['data-onscroll-reverse']),\n\t\t\t\tsticky: this.hasAttributes(element, ['data-onscroll-sticky']) ? true : false,\n\t\t\t\tanimateFrom: this.getAnimateFrom(element),\n\t\t\t\tanimateTo: this.getAnimateTo(element),\n\t\t\t})\n\t\t\tconsole.groupEnd()\n\t\t}\n\t}\n\n\t// Refresh ScrollTrigger instances\n\trefresh() {\n\t\tScrollTrigger.refresh()\n\t}\n\n\t// Restart the animations and reinitialize the ScrollTrigger instances\n\trestart() {\n\t\t// Stop the current animations and remove ScrollTriggers\n\t\tthis.stop()\n\n\t\t// Kill all existing ScrollTrigger instances\n\t\tScrollTrigger.getAll().forEach((trigger) => trigger.kill())\n\n\t\t// Refresh ScrollTrigger\n\t\tScrollTrigger.refresh()\n\n\t\t// Reapply animations and initialize ScrollTrigger\n\t\tthis.init()\n\t}\n\n\t// Stop animations and ScrollTriggers\n\tstop(target = null) {\n\t\tif (target) {\n\t\t\t// Stop animation and remove the ScrollTrigger for a specific target\n\t\t\tconst animationData = this.triggers.get(target)\n\t\t\tif (animationData) {\n\t\t\t\tanimationData.gsapAnimation.kill()\n\t\t\t\tthis.triggers.delete(target)\n\t\t\t}\n\t\t} else {\n\t\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\t\tthis.triggers.forEach(({ gsapAnimation }) => {\n\t\t\t\tgsapAnimation.kill()\n\t\t\t})\n\t\t\tthis.triggers.clear()\n\t\t}\n\t}\n\n\t// Update animation for a specific target with new fromProperties and toProperties\n\tupdate(target, fromProperties, toProperties) {\n\t\tconst animationData = this.triggers.get(target)\n\n\t\tif (animationData) {\n\t\t\t// Stop the existing animation\n\t\t\tanimationData.gsapAnimation.kill()\n\n\t\t\t// Reinitialize the animation with updated properties\n\t\t\tconst gsapAnimation = gsap.fromTo(animationData.element, fromProperties, toProperties)\n\t\t\tthis.triggers.set(gsapAnimation.scrollTrigger, {\n\t\t\t\t...animationData,\n\t\t\t\tfromProperties,\n\t\t\t\ttoProperties,\n\t\t\t\tgsapAnimation,\n\t\t\t})\n\t\t}\n\t}\n\n\t// Destroy the OnscrollDetection instance\n\tdestroy() {\n\t\t// Stop all animations and clear the ScrollTrigger instances\n\t\tthis.stop()\n\t\tthis.triggers = null\n\t}\n}\n"],"names":["OnscrollDetection","options","this","elements","screen","triggers","Map","init","_proto","prototype","_this","gsap","utils","toArray","forEach","element","index","trigger","getTrigger","getScreen","matchMedia","fromProperties","getFromProperties","toProperties","getToProperties","add","gsapAnimation","fromTo","set","scrollTrigger","debugMode","hasAttributes","hasAttribute","parentElement","document","querySelector","dataset","onscrollTrigger","console","error","onscrollScreen","animateFrom","getAnimateFrom","offset","getOffsetAndDistance","_extends","bottom","top","x","getDirection","y","animateTo","getAnimateTo","stickyProperties","getStickyProperties","getX","getY","ease","start","getStart","end","getEnd","invalidateOnRefresh","pin","pinSpacing","scrub","getScrub","markers","attrs","every","attr","JSON","parse","onscrollFrom","onscrollTo","getOffset","parseInt","onscrollOffset","onscrollDirection","getDistanceOrSpeed","distance","triggerHeight","offsetHeight","_element$dataset$onsc","split","offsetValue","distanceValue","trim","endsWith","parseFloat","viewportHeight","window","innerHeight","scrollSpeed","onscrollSpeed","additionalDistance","includes","_scrollSpeed$split$ma","map","percentage","triggerElement","autoDistance","Math","abs","scrollDistance","onscrollDelay","stickyOffset","_element$dataset$onsc2","onscrollStart","_element$dataset$onsc3","clientHeight","onscrollEnd","group","log","triggerStart","triggerEnd","auto","offsetBefore","offsetAfter","delay","speed","ScrollTrigger","maxScroll","direction","reverse","sticky","groupEnd","refresh","restart","stop","getAll","kill","target","animationData","get","_ref","clear","update","destroy"],"mappings":"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"}